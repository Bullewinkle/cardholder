(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.app.module('CardEditor', function(CardEditor) {
    var Layer, LayerCollection;
    CardEditor.CardEditorView = (function(_super) {
      __extends(CardEditorView, _super);

      function CardEditorView() {
        this.saveGeneratedCardToImage = __bind(this.saveGeneratedCardToImage, this);
        this.removeShape = __bind(this.removeShape, this);
        this.addShape = __bind(this.addShape, this);
        this.removeLayer = __bind(this.removeLayer, this);
        this.addLayer = __bind(this.addLayer, this);
        this.resize = __bind(this.resize, this);
        this.onShow = __bind(this.onShow, this);
        return CardEditorView.__super__.constructor.apply(this, arguments);
      }

      CardEditorView.prototype.logging = true;

      CardEditorView.prototype.counter = 0;

      CardEditorView.prototype.className = 'card-editor-view';

      CardEditorView.prototype.ui = {
        'canvasContainer': '#canvas-container',
        'slider': '#kaleidoscope-slider',
        'layerList': '.ui-layer-list',
        'addLayer': '.add-layer',
        'removeLayer': '.remove-layer',
        'shapeList': '.ui-shape-list',
        'addShape': '.add-shape',
        'removeShape': '.remove-shape',
        'saveImageFileButton': '.save-to-image'
      };

      CardEditorView.prototype.events = {
        'change @ui.slider': 'onSliderChange',
        'click @ui.addLayer': 'addLayer',
        'click @ui.removeLayer': 'removeLayer',
        'click @ui.addShape': 'addShape',
        'click @ui.removeShape': 'removeShape',
        'click @ui.saveImageFileButton': 'saveGeneratedCardToImage'
      };

      CardEditorView.prototype.initialize = function() {
        this.bind('all', function() {
          if (this.logging === true) {
            return console.log("CARD EDITOR VIEW:\t", arguments);
          }
        });
        this.state = new Backbone.Model({
          currentLayer: {}
        });
        this.model = new Backbone.Model();
        return this.collection = new LayerCollection();
      };

      CardEditorView.prototype.template = function(model) {
        return templatizer.cardEditor.editor(this.model);
      };

      CardEditorView.prototype.onShow = function() {
        var stageHeight, stageParams, stageWidth;
        this.listenTo(app, 'resize', this.resize);
        this.ui.layerList.sortable();
        this.ui.layerList.disableSelection();
        this.ui.shapeList.sortable();
        this.ui.shapeList.disableSelection();
        stageWidth = this.ui.canvasContainer.width();
        stageHeight = this.ui.canvasContainer.height();
        this.stage = new Kinetic.Stage({
          container: "canvas-container",
          width: stageWidth,
          height: 600
        });
        stageParams = {
          scale: this.stage.scale(),
          width: this.ui.canvasContainer.innerWidth(),
          height: this.ui.canvasContainer.innerHeight()
        };
        return this.state.set('stageParams', stageParams);
      };

      CardEditorView.prototype.resize = function() {
        var newStageParams, stageParams, xScale, yScale;
        this.trigger('resize');
        stageParams = this.state.get('stageParams');
        newStageParams = {};
        newStageParams.width = this.ui.canvasContainer.innerWidth();
        newStageParams.height = newStageParams.width * 0.5625;
        xScale = (newStageParams.width / stageParams.width) * stageParams.scale.x;
        yScale = (newStageParams.height / stageParams.height) * stageParams.scale.y;
        newStageParams.scale = {
          x: xScale,
          y: yScale
        };
        this.stage.setAttr("width", newStageParams.width);
        this.stage.setAttr("height", newStageParams.height);
        this.stage.setAttr("scale", newStageParams.scale);
        this.state.set('stageParams', newStageParams);
        return this.stage.draw();
      };

      CardEditorView.prototype.addLayer = function(e, layer, params) {
        params = params || {
          name: 'default layer'
        };
        layer = layer || new Kinetic.Layer(params);
        this.stage.add(layer);
        this.state.set('currentLayer', layer);
        this.collection.add(layer.toObject());
        this.ui.layerList.append("<li class='list-group-item ui-state-default ui-sortable-handle'><span class='ui-icon ui-icon-arrowthick-2-n-s'></span>Слой " + (this.stage.getLayers().length) + "</li>");
        return console.log(this.stage.getLayers().length);
      };

      CardEditorView.prototype.removeLayer = function() {
        var layers;
        layers = this.stage.getLayers();
        if (layers.length > 0) {
          this.ui.layerList.find(".ui-sortable-handle").eq(layers.length - 1).remove();
          layers[layers.length - 1].destroy();
          this.state.set('currentLayer', layers[layers.length - 1] || {});
        }
        return console.log(this.stage.getLayers().length);
      };

      CardEditorView.prototype.addShape = function() {
        var layer, shape;
        console.log('addShape');
        if (this.stage.getLayers().length < 1) {
          this.addLayer();
        }
        layer = this.state.get('currentLayer');
        shape = new Kinetic.RegularPolygon({
          x: app.getRandom(0, this.stage.getWidth()),
          y: app.getRandom(0, this.stage.getHeight()),
          sides: app.getRandom(3, 9),
          radius: app.getRandom(10, 140),
          fillRed: app.getRandom(1, 255),
          fillGreen: app.getRandom(1, 255),
          fillBlue: app.getRandom(1, 255),
          opacity: app.getRandom(0.1, 1, 2),
          draggable: true
        });
        layer.add(shape);
        layer.draw();
        return this.ui.shapeList.append("<li class='list-group-item ui-state-default ui-sortable-handle'><span class='ui-icon ui-icon-arrowthick-2-n-s'></span>Случайная фигура " + (this.state.get('currentLayer').children.length) + "</li>");
      };

      CardEditorView.prototype.removeShape = function() {
        var layer, shapes;
        console.log('removeShape');
        layer = this.state.get('currentLayer');
        shapes = layer.children;
        if (shapes && shapes.length > 0) {
          this.ui.shapeList.find(".ui-sortable-handle").eq(shapes.length - 1).remove();
          shapes[shapes.length - 1].destroy();
          return layer.draw();
        }
      };

      CardEditorView.prototype.saveGeneratedCardToImage = function() {
        return this.stage.toDataURL({
          miteType: "image/png",
          callback: function(data) {
            var image, imageWindow;
            image = data;
            imageWindow = window.open(image);
            return $(imageWindow.document.body).prepend("<p>Нажмите сохранить (ctrl/cmd + s)</p>");
          }
        });
      };

      return CardEditorView;

    })(Marionette.ItemView);
    Layer = (function(_super) {
      __extends(Layer, _super);

      function Layer() {
        return Layer.__super__.constructor.apply(this, arguments);
      }

      return Layer;

    })(Backbone.Model);
    return LayerCollection = (function(_super) {
      __extends(LayerCollection, _super);

      function LayerCollection() {
        return LayerCollection.__super__.constructor.apply(this, arguments);
      }

      LayerCollection.prototype.model = Layer;

      return LayerCollection;

    })(Backbone.Collection);
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,