(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.starsGen', function(StarsGen) {
    this.options = {
      counter: 0,
      starsAmount: 0
    };
    return this.draw = function() {
      var args, canvas, colors, context, innerRadius, model, nPoints, outerRadius, randomColor, randomColorNum, star, xCenter, yCenter;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      star = (function(_this) {
        return function(context, xCenter, yCenter, nPoints, outerRadius, innerRadius) {
          var angle, ixVertex, radius;
          context.beginPath();
          ixVertex = 0;
          while (ixVertex <= 2 * nPoints) {
            angle = ixVertex * Math.PI / nPoints - Math.PI / 2;
            radius = (ixVertex % 2 === 0 ? innerRadius : outerRadius);
            context.lineTo(xCenter + radius * Math.cos(angle), yCenter + radius * Math.sin(angle));
            ++ixVertex;
          }
        };
      })(this);
      if (this.options.starsAmount === 0) {
        this.options.starsAmount = app.getRandom(3, 20);
      }
      context = canvas.getContext('2d');
      xCenter = app.getRandom(0, canvas.width);
      yCenter = app.getRandom(0, canvas.height);
      nPoints = app.getRandom(3, 20);
      outerRadius = app.getRandom(canvas.width / 6, canvas.width / 2);
      innerRadius = app.getRandom(canvas.width / 10, canvas.width / 14);
      colors = model.get('generators.gradientGen.colorScheme');
      randomColorNum = app.getRandom(0, colors.length - 1);
      randomColor = colors[randomColorNum];
      context.beginPath();
      star(context, xCenter, yCenter, nPoints, outerRadius, innerRadius);
      context.fillStyle = '#' + randomColor;
      context.fill();
      return this.options.counter++;
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmRfZ2VuZXJhdG9yL2dlbmVyYXRvcnMvc3RhcnMtZ2VuZXJhdG9yLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsa0JBQUE7O0FBQUEsRUFBQSxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQUwsQ0FBWSxtQ0FBWixFQUFpRCxTQUFDLFFBQUQsR0FBQTtBQUVoRCxJQUFBLElBQUMsQ0FBQSxPQUFELEdBQ0M7QUFBQSxNQUFBLE9BQUEsRUFBUyxDQUFUO0FBQUEsTUFDQSxXQUFBLEVBQWEsQ0FEYjtLQURELENBQUE7V0FJQSxJQUFDLENBQUEsSUFBRCxHQUFRLFNBQUEsR0FBQTtBQUNQLFVBQUEsNEhBQUE7QUFBQSxNQURRLHVCQUFPLHNCQUFNLDhEQUNyQixDQUFBO0FBQUEsTUFBQSxJQUFBLEdBQU8sQ0FBQSxTQUFBLEtBQUEsR0FBQTtlQUFBLFNBQUMsT0FBRCxFQUFVLE9BQVYsRUFBbUIsT0FBbkIsRUFBNEIsT0FBNUIsRUFBcUMsV0FBckMsRUFBa0QsV0FBbEQsR0FBQTtBQUVOLGNBQUEsdUJBQUE7QUFBQSxVQUFBLE9BQU8sQ0FBQyxTQUFSLENBQUEsQ0FBQSxDQUFBO0FBQUEsVUFDQSxRQUFBLEdBQVcsQ0FEWCxDQUFBO0FBR0EsaUJBQU0sUUFBQSxJQUFZLENBQUEsR0FBSSxPQUF0QixHQUFBO0FBQ0MsWUFBQSxLQUFBLEdBQVEsUUFBQSxHQUFXLElBQUksQ0FBQyxFQUFoQixHQUFxQixPQUFyQixHQUErQixJQUFJLENBQUMsRUFBTCxHQUFVLENBQWpELENBQUE7QUFBQSxZQUNBLE1BQUEsR0FBUyxDQUFJLFFBQUEsR0FBVyxDQUFYLEtBQWdCLENBQW5CLEdBQTBCLFdBQTFCLEdBQTJDLFdBQTVDLENBRFQsQ0FBQTtBQUFBLFlBRUEsT0FBTyxDQUFDLE1BQVIsQ0FBZSxPQUFBLEdBQVUsTUFBQSxHQUFTLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBVCxDQUFsQyxFQUFtRCxPQUFBLEdBQVUsTUFBQSxHQUFTLElBQUksQ0FBQyxHQUFMLENBQVMsS0FBVCxDQUF0RSxDQUZBLENBQUE7QUFBQSxZQUdBLEVBQUEsUUFIQSxDQUREO1VBQUEsQ0FMTTtRQUFBLEVBQUE7TUFBQSxDQUFBLENBQUEsQ0FBQSxJQUFBLENBQVAsQ0FBQTtBQVlBLE1BQUEsSUFBRyxJQUFDLENBQUEsT0FBTyxDQUFDLFdBQVQsS0FBd0IsQ0FBM0I7QUFBa0MsUUFBQSxJQUFDLENBQUEsT0FBTyxDQUFDLFdBQVQsR0FBdUIsR0FBRyxDQUFDLFNBQUosQ0FBZSxDQUFmLEVBQWtCLEVBQWxCLENBQXZCLENBQWxDO09BWkE7QUFBQSxNQWNBLE9BQUEsR0FBVSxNQUFNLENBQUMsVUFBUCxDQUFrQixJQUFsQixDQWRWLENBQUE7QUFBQSxNQWdCQSxPQUFBLEdBQVUsR0FBRyxDQUFDLFNBQUosQ0FBZSxDQUFmLEVBQWtCLE1BQU0sQ0FBQyxLQUF6QixDQWhCVixDQUFBO0FBQUEsTUFpQkEsT0FBQSxHQUFVLEdBQUcsQ0FBQyxTQUFKLENBQWUsQ0FBZixFQUFrQixNQUFNLENBQUMsTUFBekIsQ0FqQlYsQ0FBQTtBQUFBLE1Ba0JBLE9BQUEsR0FBVSxHQUFHLENBQUMsU0FBSixDQUFlLENBQWYsRUFBa0IsRUFBbEIsQ0FsQlYsQ0FBQTtBQUFBLE1BbUJBLFdBQUEsR0FBYyxHQUFHLENBQUMsU0FBSixDQUFlLE1BQU0sQ0FBQyxLQUFQLEdBQWEsQ0FBNUIsRUFBK0IsTUFBTSxDQUFDLEtBQVAsR0FBYSxDQUE1QyxDQW5CZCxDQUFBO0FBQUEsTUFvQkEsV0FBQSxHQUFjLEdBQUcsQ0FBQyxTQUFKLENBQWUsTUFBTSxDQUFDLEtBQVAsR0FBYSxFQUE1QixFQUFnQyxNQUFNLENBQUMsS0FBUCxHQUFhLEVBQTdDLENBcEJkLENBQUE7QUFBQSxNQXNCQSxNQUFBLEdBQVMsS0FBSyxDQUFDLEdBQU4sQ0FBVSxvQ0FBVixDQXRCVCxDQUFBO0FBQUEsTUF3QkEsY0FBQSxHQUFpQixHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBaUIsTUFBTSxDQUFDLE1BQVAsR0FBZ0IsQ0FBakMsQ0F4QmpCLENBQUE7QUFBQSxNQXlCQSxXQUFBLEdBQWMsTUFBUSxDQUFBLGNBQUEsQ0F6QnRCLENBQUE7QUFBQSxNQTJCQSxPQUFPLENBQUMsU0FBUixDQUFBLENBM0JBLENBQUE7QUFBQSxNQTZCQSxJQUFBLENBQUssT0FBTCxFQUFjLE9BQWQsRUFBdUIsT0FBdkIsRUFBZ0MsT0FBaEMsRUFBeUMsV0FBekMsRUFBc0QsV0FBdEQsQ0E3QkEsQ0FBQTtBQUFBLE1BK0JBLE9BQU8sQ0FBQyxTQUFSLEdBQW9CLEdBQUEsR0FBTSxXQS9CMUIsQ0FBQTtBQUFBLE1BZ0NBLE9BQU8sQ0FBQyxJQUFSLENBQUEsQ0FoQ0EsQ0FBQTthQWtDQSxJQUFDLENBQUEsT0FBTyxDQUFDLE9BQVQsR0FuQ087SUFBQSxFQU53QztFQUFBLENBQWpELENBQUEsQ0FBQTtBQUFBIiwiZmlsZSI6ImNhcmRfZ2VuZXJhdG9yL2dlbmVyYXRvcnMvc3RhcnMtZ2VuZXJhdG9yLmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiQGFwcC5tb2R1bGUgJ0NhcmRHZW5lcmF0b3IuZ2VuZXJhdG9ycy5zdGFyc0dlbicsIChTdGFyc0dlbikgLT5cblxuXHRAb3B0aW9ucyA9IFxuXHRcdGNvdW50ZXI6IDBcblx0XHRzdGFyc0Ftb3VudDogMFxuXHRcblx0QGRyYXcgPSAoY2FudmFzLG1vZGVsLGFyZ3MuLi4pIC0+XG5cdFx0c3RhciA9IChjb250ZXh0LCB4Q2VudGVyLCB5Q2VudGVyLCBuUG9pbnRzLCBvdXRlclJhZGl1cywgaW5uZXJSYWRpdXMpID0+XG5cblx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKClcblx0XHRcdGl4VmVydGV4ID0gMFxuXG5cdFx0XHR3aGlsZSBpeFZlcnRleCA8PSAyICogblBvaW50c1xuXHRcdFx0XHRhbmdsZSA9IGl4VmVydGV4ICogTWF0aC5QSSAvIG5Qb2ludHMgLSBNYXRoLlBJIC8gMlxuXHRcdFx0XHRyYWRpdXMgPSAoaWYgaXhWZXJ0ZXggJSAyIGlzIDAgdGhlbiBpbm5lclJhZGl1cyBlbHNlIG91dGVyUmFkaXVzKVxuXHRcdFx0XHRjb250ZXh0LmxpbmVUbyB4Q2VudGVyICsgcmFkaXVzICogTWF0aC5jb3MoYW5nbGUpLCB5Q2VudGVyICsgcmFkaXVzICogTWF0aC5zaW4oYW5nbGUpXG5cdFx0XHRcdCsraXhWZXJ0ZXhcblx0XHRcdHJldHVyblx0XG5cblx0XHRpZiBAb3B0aW9ucy5zdGFyc0Ftb3VudCBpcyAwIHRoZW4gQG9wdGlvbnMuc3RhcnNBbW91bnQgPSBhcHAuZ2V0UmFuZG9tKCAzLCAyMCApXG5cblx0XHRjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQgJzJkJ1x0XHRcblx0XHRcblx0XHR4Q2VudGVyID0gYXBwLmdldFJhbmRvbSggMCwgY2FudmFzLndpZHRoIClcblx0XHR5Q2VudGVyID0gYXBwLmdldFJhbmRvbSggMCwgY2FudmFzLmhlaWdodCApXG5cdFx0blBvaW50cyA9IGFwcC5nZXRSYW5kb20oIDMsIDIwIClcblx0XHRvdXRlclJhZGl1cyA9IGFwcC5nZXRSYW5kb20oIGNhbnZhcy53aWR0aC82LCBjYW52YXMud2lkdGgvMiApXG5cdFx0aW5uZXJSYWRpdXMgPSBhcHAuZ2V0UmFuZG9tKCBjYW52YXMud2lkdGgvMTAsIGNhbnZhcy53aWR0aC8xNCApXG5cblx0XHRjb2xvcnMgPSBtb2RlbC5nZXQgJ2dlbmVyYXRvcnMuZ3JhZGllbnRHZW4uY29sb3JTY2hlbWUnXG5cblx0XHRyYW5kb21Db2xvck51bSA9IGFwcC5nZXRSYW5kb20gMCwgY29sb3JzLmxlbmd0aCAtIDFcblx0XHRyYW5kb21Db2xvciA9IGNvbG9yc1sgcmFuZG9tQ29sb3JOdW0gXVxuXG5cdFx0Y29udGV4dC5iZWdpblBhdGgoKVxuXHRcdFxuXHRcdHN0YXIoY29udGV4dCwgeENlbnRlciwgeUNlbnRlciwgblBvaW50cywgb3V0ZXJSYWRpdXMsIGlubmVyUmFkaXVzKVxuXG5cdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnIycgKyByYW5kb21Db2xvclxuXHRcdGNvbnRleHQuZmlsbCgpXG5cblx0XHRAb3B0aW9ucy5jb3VudGVyKytcblx0XHQjIHdoaWxlIEBvcHRpb25zLmNvdW50ZXIgPD0gQG9wdGlvbnMuc3RhcnNBbW91bnQgdGhlbiBAZHJhdyBjYW52YXMsIG1vZGVsXG5cdFx0IyBzYXZlIG9wdGlvbnMgdG8gY3VycmVudCBtb2RlbCJdfQ==