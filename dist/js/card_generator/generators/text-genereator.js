(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.textGen', function(TextGen, app, Backbone, Marionette, $, _) {
    this.draw = function() {
      var args, canvas, cardData, context, eMail, fontFamily, fontsList, model, name, phone, position, randomCardData, randomNameNum, randomPhoneEnd, randomTextOptions, renderText, sex, srcData, surname, textAlign, textBlockOptions, textOptions;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      srcData = dataFromServer.appData;
      srcData.textAligns = ['left', 'center', 'right'];
      fontsList = srcData.fontsList;
      textOptions = model.get('generators.textGen');
      cardData = model.get('data');
      textBlockOptions = !app.CardGenerator.renderingPDF ? textOptions.textBlockOptions : {
        padding: {
          top: app.getRandom(30, 70, 2),
          left: app.getRandom(15, 50, 2),
          bottom: 0,
          right: app.getRandom(15, 50, 2)
        },
        title: {
          fontSize: "" + (app.getRandom(4, 6.5, 2)) + "em",
          color: textOptions.textBlockOptions.title.color,
          textBaseline: 'middle',
          lineHeight: app.getRandom(50, 100, 2),
          marginBottom: app.getRandom(5, 40)
        },
        body: {
          fontSize: "" + (app.getRandom(1.8, 4, 2)) + "em",
          color: textOptions.textBlockOptions.body.color,
          textBaseline: 'middle',
          lineHeight: app.getRandom(25, 80, 2)
        }
      };
      name = cardData.name;
      surname = cardData.surname;
      sex = cardData.sex;
      phone = cardData.phone;
      eMail = cardData.eMail;
      position = cardData.position;
      textAlign = textOptions.textAlign;
      fontFamily = textOptions.fontFamily;
      context = canvas.getContext('2d');
      renderText = (function(_this) {
        return function(fontFamily) {
          var font, paragraphHeight, wrapText, x, y;
          if (fontFamily === 'sans-serif') {
            font = fontFamily;
          } else {
            font = '"' + fontFamily + '"';
          }
          switch (textAlign) {
            case 'left':
              x = textBlockOptions.padding.left;
              y = textBlockOptions.padding.top;
              break;
            case 'center':
              x = canvas.width / 2;
              y = textBlockOptions.padding.top;
              break;
            case 'right':
              x = canvas.width - textBlockOptions.padding.right;
              y = textBlockOptions.padding.top;
          }
          paragraphHeight = 0;
          wrapText = function(context, text, x, y, maxWidth, lineHeight) {
            var line, linesCounter, metrics, testLine, testWidth, word, words, _i, _len;
            words = text.split(' ');
            line = '';
            linesCounter = 0;
            for (_i = 0, _len = words.length; _i < _len; _i++) {
              word = words[_i];
              linesCounter = _i + 1;
              testLine = line + word + ' ';
              metrics = context.measureText(testLine);
              testWidth = metrics.width;
              if (testWidth > maxWidth && _i > 0) {
                context.fillText(line, x, y);
                line = word + ' ';
                y += lineHeight;
              } else {
                line = testLine;
              }
              paragraphHeight = y;
            }
            return context.fillText(line, x, y);
          };
          context.font = "" + textBlockOptions.title.fontSize + " " + font;
          context.textAlign = textAlign;
          context.fillStyle = textBlockOptions.title.color;
          context.textBaseline = textBlockOptions.title.textBaseline;
          context.lineWidth = textBlockOptions.title.lineWidth;
          wrapText(context, _this.renderInitials(sex, name, surname), x, y, canvas.width - (textBlockOptions.padding.left + textBlockOptions.padding.right), textBlockOptions.title.lineHeight);
          context.font = "" + textBlockOptions.body.fontSize + " " + font;
          context.fillStyle = textBlockOptions.body.color;
          y += paragraphHeight + textBlockOptions.title.marginBottom;
          context.fillText("тел.: " + phone, x, y);
          y += textBlockOptions.body.lineHeight;
          context.fillText("email: " + eMail, x, y);
          y += textBlockOptions.body.lineHeight;
          wrapText(context, position, x, y, canvas.width - (textBlockOptions.padding.left + textBlockOptions.padding.right), textBlockOptions.body.lineHeight);
          return context.save();
        };
      })(this);
      if (cardData.isDefault || textOptions.isDefault) {
        randomCardData = {
          isDefault: false
        };
        randomNameNum = app.getRandom(0, srcData.names.length - 1);
        randomPhoneEnd = app.getRandom(0, srcData.names.length - 1);
        if (('' + randomPhoneEnd).length < 2) {
          randomPhoneEnd = '0' + randomPhoneEnd;
        }
        randomCardData.sex = srcData.names[randomNameNum].sex;
        randomCardData.name = srcData.names[randomNameNum].text;
        randomCardData.surname = srcData.surnames[app.getRandom(0, srcData.surnames.length - 1)];
        randomCardData.eMail = srcData.emails[app.getRandom(0, srcData.emails.length - 1)];
        randomCardData.position = srcData.positions[app.getRandom(0, srcData.positions.length - 1)];
        randomCardData.phone = '+7-' + srcData.phones + randomPhoneEnd;
        model.set('data', randomCardData, {
          silent: true
        });
        randomTextOptions = {
          isDefault: false
        };
        randomTextOptions.textAlign = srcData.textAligns[app.getRandom(0, srcData.textAligns.length - 1)];
        randomTextOptions.fontFamily = fontFamily;
        randomTextOptions.textBlockOptions = {
          padding: {
            top: app.getRandom(10, 50, 2),
            left: app.getRandom(10, 50, 2),
            bottom: 0,
            right: app.getRandom(10, 50, 2)
          },
          title: {
            fontSize: "" + (app.getRandom(1, 2.5, 2)) + "em",
            color: "rgb(" + (app.getRandom(0, 120)) + "," + (app.getRandom(0, 120)) + "," + (app.getRandom(0, 120)) + ")",
            textBaseline: 'middle',
            lineHeight: app.getRandom(18, 40, 2),
            marginBottom: 0
          },
          body: {
            fontSize: "" + (app.getRandom(0.5, 1.5, 2)) + "em",
            color: "rgb(" + (app.getRandom(0, 160)) + "," + (app.getRandom(0, 160)) + "," + (app.getRandom(0, 160)) + ")",
            textBaseline: 'middle',
            lineHeight: app.getRandom(10, 30, 2)
          }
        };
        model.set('generators.textGen', randomTextOptions, {
          silent: true
        });
        return this.draw(canvas, model);
      } else {
        return renderText(fontFamily);
      }
    };
    return this.renderInitials = function(sex, name, surname) {
      if (sex === 'male') {
        surname = surname;
      } else if (sex === 'female') {
        if (surname.substr(surname.length - 2, surname.length) === 'ий') {
          surname = surname.slice(0, surname.length - 2);
          surname = surname + 'ая';
        } else {
          surname = surname + 'a';
        }
      }
      return name + ' ' + surname;
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,