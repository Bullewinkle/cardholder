(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.textGen', function(TextGen, app, Backbone, Marionette, $, _) {
    this.draw = function() {
      var args, canvas, cardData, context, eMail, fontFamily, fontsList, model, name, phone, position, randomCardData, randomNameNum, randomPhoneEnd, randomTextOptions, renderText, sex, srcData, surname, textAlign, textBlockOptions, textOptions;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      srcData = dataFromServer.appData;
      srcData.textAligns = ['left', 'center', 'right'];
      fontsList = srcData.fontsList;
      textOptions = model.get('generators.textGen');
      cardData = model.get('data');
      name = cardData.name;
      surname = cardData.surname;
      sex = cardData.sex;
      phone = cardData.phone;
      eMail = cardData.eMail;
      position = cardData.position;
      textAlign = textOptions.textAlign;
      fontFamily = textOptions.fontFamily;
      if (app.CardGenerator.renderingPDF) {
        textBlockOptions = {
          margin: {
            top: 80,
            left: 30,
            bottom: 0,
            right: 30
          },
          title: {
            fontSize: '6em',
            color: '#000',
            textBaseline: 'middle',
            lineWidth: 1.5,
            lineHeight: 74
          },
          info: {
            fontSize: '2.4em',
            color: '#000',
            textBaseline: 'middle',
            lineWidth: 1.5,
            lineHeight: 36
          }
        };
      } else {
        textBlockOptions = {
          margin: {
            top: 30,
            left: 20,
            bottom: 0,
            right: 20
          },
          title: {
            fontSize: '1.5em',
            color: '#000',
            textBaseline: 'middle',
            lineWidth: 1.5,
            lineHeight: 28
          },
          info: {
            fontSize: '0.8em',
            color: '#000',
            textBaseline: 'middle',
            lineWidth: 1.5,
            lineHeight: 18
          }
        };
      }
      context = canvas.getContext('2d');
      renderText = (function(_this) {
        return function(fontFamily) {
          var font, paragraphHeight, wrapText, x, y;
          if (fontFamily === 'sans-serif') {
            font = fontFamily;
          } else {
            font = '"' + fontFamily + '"';
          }
          switch (textAlign) {
            case 'left':
              x = textBlockOptions.margin.left;
              y = textBlockOptions.margin.top;
              break;
            case 'center':
              x = canvas.width / 2;
              y = textBlockOptions.margin.top;
              break;
            case 'right':
              x = canvas.width - textBlockOptions.margin.right;
              y = textBlockOptions.margin.top;
          }
          paragraphHeight = 0;
          wrapText = function(context, text, x, y, maxWidth, lineHeight) {
            var line, linesCounter, metrics, testLine, testWidth, word, words, _i, _len;
            words = text.split(' ');
            line = '';
            linesCounter = 0;
            for (_i = 0, _len = words.length; _i < _len; _i++) {
              word = words[_i];
              linesCounter = _i + 1;
              testLine = line + word + ' ';
              metrics = context.measureText(testLine);
              testWidth = metrics.width;
              if (testWidth > maxWidth && _i > 0) {
                context.fillText(line, x, y);
                line = word + ' ';
                y += lineHeight;
              } else {
                line = testLine;
              }
              paragraphHeight = y;
            }
            return context.fillText(line, x, y);
          };
          context.font = "" + textBlockOptions.title.fontSize + " " + font;
          context.textAlign = textAlign;
          context.fillStyle = textBlockOptions.title.color;
          context.textBaseline = textBlockOptions.title.textBaseline;
          context.lineWidth = textBlockOptions.title.lineWidth;
          wrapText(context, _this.renderInitials(sex, name, surname), x, y, canvas.width - (textBlockOptions.margin.left + textBlockOptions.margin.right), textBlockOptions.title.lineHeight);
          context.font = "" + textBlockOptions.info.fontSize + " " + font;
          if (textAlign === 'right') {
            x -= textBlockOptions.margin.left;
          }
          y += paragraphHeight;
          wrapText(context, "тел.: " + phone, x, y, canvas.width - (textBlockOptions.margin.left + textBlockOptions.margin.right), textBlockOptions.info.lineHeight);
          y += textBlockOptions.info.lineHeight;
          wrapText(context, "email: " + eMail, x, y, canvas.width - (textBlockOptions.margin.left + textBlockOptions.margin.right), textBlockOptions.info.lineHeight);
          y += textBlockOptions.info.lineHeight;
          if (textAlign === 'right') {
            x += textBlockOptions.margin.left;
          }
          wrapText(context, position, x, y, canvas.width - (textBlockOptions.margin.left + textBlockOptions.margin.right), textBlockOptions.info.lineHeight);
          return context.save();
        };
      })(this);
      if (cardData.isDefault || textOptions.isDefault) {
        randomCardData = {
          isDefault: false
        };
        randomNameNum = app.getRandom(0, srcData.names.length - 1);
        randomPhoneEnd = app.getRandom(0, srcData.names.length - 1);
        if (('' + randomPhoneEnd).length < 2) {
          randomPhoneEnd = '0' + randomPhoneEnd;
        }
        randomCardData.sex = srcData.names[randomNameNum].sex;
        randomCardData.name = srcData.names[randomNameNum].text;
        randomCardData.surname = srcData.surnames[app.getRandom(0, srcData.surnames.length - 1)];
        randomCardData.eMail = srcData.emails[app.getRandom(0, srcData.emails.length - 1)];
        randomCardData.position = srcData.positions[app.getRandom(0, srcData.positions.length - 1)];
        randomCardData.phone = '+7-' + srcData.phones + randomPhoneEnd;
        model.set('data', randomCardData, {
          silent: true
        });
        randomTextOptions = {
          isDefault: false
        };
        randomTextOptions.textAlign = srcData.textAligns[app.getRandom(0, srcData.textAligns.length - 1)];
        randomTextOptions.fontFamily = fontFamily;
        model.set('generators.textGen', randomTextOptions, {
          silent: true
        });
        return this.draw(canvas, model);
      } else {
        return renderText(fontFamily);
      }
    };
    return this.renderInitials = function(sex, name, surname) {
      if (sex === 'male') {
        surname = surname;
      } else if (sex === 'female') {
        if (surname.substr(surname.length - 2, surname.length) === 'ий') {
          surname = surname.slice(0, surname.length - 2);
          surname = surname + 'ая';
        } else {
          surname = surname + 'a';
        }
      }
      return name + ' ' + surname;
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,