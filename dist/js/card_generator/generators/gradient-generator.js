(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.gradientGen', function(GradientGen) {
    GradientGen.options = {};
    this.gradientVariants = [
      function() {
        var args, context;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        context.fillStyle = '#fff';
        return context.fillRect(0, 0, context.canvas.width, context.canvas.height);
      }, function() {
        var args, context, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        return GradientGen.options.definedVal1 = randomVal1;
      }, function() {
        var args, context, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, 0, context.canvas.width / 2, context.canvas.height);
        return GradientGen.options.definedVal1 = randomVal1;
      }, function() {
        var args, context, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, context.canvas.height / 2, context.canvas.width, context.canvas.height);
        return GradientGen.options.definedVal1 = randomVal1;
      }, function() {
        var args, canvas, colorScheme, context, gradient, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, canvas.width, canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height * 1.5);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.200, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.800, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.beginPath();
        context.moveTo(canvas.width * 75 / 100, 0);
        context.lineTo(canvas.width, 0);
        context.lineTo(canvas.width, canvas.height);
        context.lineTo(canvas.width / 2, canvas.height);
        context.lineTo(canvas.width * 75 / 100, 0);
        context.closePath();
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.stroke();
        context.fillStyle = gradient;
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, context, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
          randomVal2 = app.getRandom(0.6, 0.9, 2);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, context.canvas.height * randomVal2, context.canvas.width, context.canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, canvas.width, canvas.height);
        context.rect(canvas.width * 10 / 100, 0, canvas.width * 40 / 100, canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, canvas.width, canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height * 0.25);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.495, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal2]);
        context.beginPath();
        context.moveTo(0, 0);
        context.lineTo(canvas.width * 20 / 100, 0);
        context.lineTo(canvas.width * 37 / 100, canvas.height);
        context.lineTo(0, canvas.height);
        context.lineTo(0, 0);
        context.closePath();
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.stroke();
        context.fillStyle = gradient;
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2, randomVal3, randomVal4, randomVal5;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          randomVal3 = GradientGen.options.definedVal3;
          randomVal4 = GradientGen.options.definedVal4;
          randomVal5 = GradientGen.options.definedVal5;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          randomVal3 = app.getRandom(0, colorScheme.length - 1);
          randomVal4 = app.getRandom(0, colorScheme.length - 1);
          randomVal5 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width, canvas.height, 0.000, canvas.width, canvas.height, 80.000);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.200, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.215, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.400, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.415, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.600, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.615, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.800, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.815, '#' + colorScheme[randomVal5]);
        gradient.addColorStop(0.960, '#' + colorScheme[randomVal5]);
        gradient.addColorStop(1.000, "rgba(255, 255, 255, 1.000)");
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        GradientGen.options.definedVal2 = randomVal2;
        GradientGen.options.definedVal3 = randomVal3;
        GradientGen.options.definedVal4 = randomVal4;
        return GradientGen.options.definedVal5 = randomVal5;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2, randomVal3, randomVal4;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          randomVal3 = GradientGen.options.definedVal3;
          randomVal4 = GradientGen.options.definedVal4;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          randomVal3 = app.getRandom(0, colorScheme.length - 1);
          randomVal4 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width + 5, canvas.height / 2, 0.000, canvas.width + 5, canvas.height / 2, 120.000);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.073, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.080, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.235, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.250, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.485, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.735, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.750, "rgba(255, 255, 255, 1.000)");
        gradient.addColorStop(1.000, "rgba(255, 255, 255, 1.000)");
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        GradientGen.options.definedVal2 = randomVal2;
        GradientGen.options.definedVal3 = randomVal3;
        return GradientGen.options.definedVal4 = randomVal4;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2, randomVal3, randomVal4;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          randomVal3 = GradientGen.options.definedVal3;
          randomVal4 = GradientGen.options.definedVal4;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          randomVal3 = app.getRandom(0, colorScheme.length - 1);
          randomVal4 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width / 2, canvas.height - 8, 0.000, canvas.width / 2, canvas.height + 200, 270.000);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.073, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.085, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.235, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.250, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.480, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.735, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.750, "rgba(255, 255, 255, 1.000)");
        gradient.addColorStop(1.000, "rgba(255, 255, 255, 1.000)");
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        GradientGen.options.definedVal2 = randomVal2;
        GradientGen.options.definedVal3 = randomVal3;
        return GradientGen.options.definedVal4 = randomVal4;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width / 2, 0, 0.000, canvas.width / 2, 0 - 310, 400.000);
        gradient.addColorStop(0.000, '#fff');
        gradient.addColorStop(0.730, '#fff');
        gradient.addColorStop(0.750, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal1]);
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        return GradientGen.options.definedVal1 = randomVal1;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2, randomVal3;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          randomVal3 = GradientGen.options.definedVal3;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          randomVal3 = app.getRandom(40, 150);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0.000, canvas.width / 2, canvas.height / 2, randomVal3);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.735, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.750, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        GradientGen.options.definedVal2 = randomVal2;
        return GradientGen.options.definedVal3 = randomVal3;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2 + 42);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.550, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.750, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.beginPath();
        context.moveTo(canvas.width * 67 / 100, 0);
        context.lineTo(canvas.width * 71 / 100, 0);
        context.lineTo(canvas.width * 61 / 100, canvas.height);
        context.lineTo(canvas.width * 57 / 100, canvas.height);
        context.lineTo(canvas.width * 67 / 100, 0);
        context.moveTo(canvas.width * 74 / 100, 0);
        context.lineTo(canvas.width * 81 / 100, 0);
        context.lineTo(canvas.width * 71 / 100, canvas.height);
        context.lineTo(canvas.width * 64 / 100, canvas.height);
        context.closePath();
        context.stroke();
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, canvas.width, canvas.height);
        context.rect(0, canvas.height * 50 / 100, canvas.width, canvas.height * 40 / 100);
        gradient = context.createLinearGradient(canvas.width / 2, 0, canvas.width / 2, canvas.height);
        gradient.addColorStop(0, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2 + 42);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.beginPath();
        context.moveTo(0, 0);
        context.lineTo(canvas.width * 20 / 100, 0);
        context.lineTo(canvas.width * 30 / 100, canvas.height / 2.5);
        context.lineTo(canvas.width * 20 / 100, canvas.height);
        context.lineTo(0, canvas.height);
        context.lineTo(0, 0);
        context.closePath();
        context.stroke();
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2 + 42);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.beginPath();
        context.moveTo(canvas.width * 70 / 100, 0);
        context.lineTo(canvas.width, 0);
        context.lineTo(canvas.width, canvas.height);
        context.lineTo(canvas.width * 70 / 100, canvas.height);
        context.lineTo(canvas.width * 80 / 100, canvas.height / 2.5);
        context.lineTo(canvas.width * 70 / 100, 0);
        context.closePath();
        context.stroke();
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2 + 42);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.rect(canvas.width * 30 / 100, canvas.height * 22 / 100, canvas.width * 65 / 100, canvas.height * 70 / 100);
        context.closePath();
        context.stroke();
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }
    ];
    return this.draw = function() {
      var args, canvas, context, definedVariant, initColorScheme, model, randomVariant;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      initColorScheme = function() {
        var hue, scm, variation, variations;
        scm = new ColorScheme();
        hue = app.getRandom(0.2, 359, 1);
        variations = ['default', 'pastel', 'soft', 'light', 'hard', 'pale'];
        variation = variations[app.getRandom(0, variations.length - 1)];
        scm.from_hue(hue).scheme('tetrade').distance(0.1).add_complement(false).variation(variation).web_safe(false);
        return scm.colors();
      };
      context = canvas.getContext("2d");
      $.extend(GradientGen.options, model.get('generators.gradientGen'));
      if (model.get('generators.gradientGen.isDefault')) {
        randomVariant = app.getRandom(0, this.gradientVariants.length - 1);
        GradientGen.options.colorScheme = initColorScheme();
        this.gradientVariants[randomVariant](context);
        GradientGen.options.gradientVariantNum = randomVariant;
        GradientGen.options.isDefault = false;
        return model.set('generators.gradientGen', GradientGen.options, {
          silent: true
        });
      } else if (!model.get('generators.gradientGen.isDefault')) {
        definedVariant = model.get('generators.gradientGen.gradientVariantNum');
        return this.gradientVariants[definedVariant](context);
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,