(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.gradientGen', function(GradientGen) {
    GradientGen.options = {};
    this.gradientVariants = [
      function() {
        var args, context;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        return context.clearRect(0, 0, context.canvas.width, context.canvas.height);
      }, function() {
        var args, context, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        return GradientGen.options.definedVal1 = randomVal1;
      }, function() {
        var args, context, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, 0, context.canvas.width / 2, context.canvas.height);
        return GradientGen.options.definedVal1 = randomVal1;
      }, function() {
        var args, context, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, context.canvas.height / 2, context.canvas.width, context.canvas.height);
        return GradientGen.options.definedVal1 = randomVal1;
      }, function() {
        var args, canvas, colorScheme, context, gradient, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height * 1.5);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.200, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.800, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.beginPath();
        context.moveTo(canvas.width * 75 / 100, 0);
        context.lineTo(canvas.width, 0);
        context.lineTo(canvas.width, canvas.height);
        context.lineTo(canvas.width / 2, canvas.height);
        context.lineTo(canvas.width * 75 / 100, 0);
        context.closePath();
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.stroke();
        context.fillStyle = gradient;
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, context, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
          randomVal2 = app.getRandom(0.6, 0.9, 2);
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, context.canvas.height * randomVal2, context.canvas.width, context.canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.rect(canvas.width * 10 / 100, 0, canvas.width * 40 / 100, canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height * 0.25);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.495, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal2]);
        context.beginPath();
        context.moveTo(0, 0);
        context.lineTo(canvas.width * 20 / 100, 0);
        context.lineTo(canvas.width * 37 / 100, canvas.height);
        context.lineTo(0, canvas.height);
        context.lineTo(0, 0);
        context.closePath();
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.stroke();
        context.fillStyle = gradient;
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2, randomVal3, randomVal4, randomVal5;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          randomVal3 = GradientGen.options.definedVal3;
          randomVal4 = GradientGen.options.definedVal4;
          randomVal5 = GradientGen.options.definedVal5;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          randomVal3 = app.getRandom(0, colorScheme.length - 1);
          randomVal4 = app.getRandom(0, colorScheme.length - 1);
          randomVal5 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width, canvas.height, 0.000, canvas.width, canvas.height, 80.000);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.200, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.215, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.400, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.415, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.600, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.615, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.800, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.815, '#' + colorScheme[randomVal5]);
        gradient.addColorStop(0.960, '#' + colorScheme[randomVal5]);
        gradient.addColorStop(1.000, "rgba(255, 255, 255, 1.000)");
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        GradientGen.options.definedVal2 = randomVal2;
        GradientGen.options.definedVal3 = randomVal3;
        GradientGen.options.definedVal4 = randomVal4;
        return GradientGen.options.definedVal5 = randomVal5;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2, randomVal3, randomVal4;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          randomVal3 = GradientGen.options.definedVal3;
          randomVal4 = GradientGen.options.definedVal4;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          randomVal3 = app.getRandom(0, colorScheme.length - 1);
          randomVal4 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width + 5, canvas.height / 2, 0.000, canvas.width + 5, canvas.height / 2, 120.000);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.073, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.080, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.235, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.250, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.485, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.735, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.750, "rgba(255, 255, 255, 1.000)");
        gradient.addColorStop(1.000, "rgba(255, 255, 255, 1.000)");
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        GradientGen.options.definedVal2 = randomVal2;
        GradientGen.options.definedVal3 = randomVal3;
        return GradientGen.options.definedVal4 = randomVal4;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2, randomVal3, randomVal4;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          randomVal3 = GradientGen.options.definedVal3;
          randomVal4 = GradientGen.options.definedVal4;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          randomVal3 = app.getRandom(0, colorScheme.length - 1);
          randomVal4 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width / 2, canvas.height - 8, 0.000, canvas.width / 2, canvas.height + 200, 270.000);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.073, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.085, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.235, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(0.250, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.480, '#' + colorScheme[randomVal3]);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.735, '#' + colorScheme[randomVal4]);
        gradient.addColorStop(0.750, "rgba(255, 255, 255, 1.000)");
        gradient.addColorStop(1.000, "rgba(255, 255, 255, 1.000)");
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        GradientGen.options.definedVal2 = randomVal2;
        GradientGen.options.definedVal3 = randomVal3;
        return GradientGen.options.definedVal4 = randomVal4;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width / 2, 0, 0.000, canvas.width / 2, 0 - 310, 400.000);
        gradient.addColorStop(0.000, '#fff');
        gradient.addColorStop(0.730, '#fff');
        gradient.addColorStop(0.750, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal1]);
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        return GradientGen.options.definedVal1 = randomVal1;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2, randomVal3;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          randomVal3 = GradientGen.options.definedVal3;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          randomVal3 = app.getRandom(40, 150);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createRadialGradient(canvas.width / 2, canvas.height / 2, 0.000, canvas.width / 2, canvas.height / 2, randomVal3);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.735, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.750, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.fillRect(0, 0, canvas.width, canvas.height);
        GradientGen.options.definedVal1 = randomVal1;
        GradientGen.options.definedVal2 = randomVal2;
        return GradientGen.options.definedVal3 = randomVal3;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2 + 42);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.550, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.750, '#' + colorScheme[randomVal2]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.beginPath();
        context.moveTo(canvas.width * 67 / 100, 0);
        context.lineTo(canvas.width * 71 / 100, 0);
        context.lineTo(canvas.width * 61 / 100, canvas.height);
        context.lineTo(canvas.width * 57 / 100, canvas.height);
        context.lineTo(canvas.width * 67 / 100, 0);
        context.moveTo(canvas.width * 74 / 100, 0);
        context.lineTo(canvas.width * 81 / 100, 0);
        context.lineTo(canvas.width * 71 / 100, canvas.height);
        context.lineTo(canvas.width * 64 / 100, canvas.height);
        context.closePath();
        context.stroke();
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.rect(0, canvas.height * 50 / 100, canvas.width, canvas.height * 40 / 100);
        gradient = context.createLinearGradient(canvas.width / 2, 0, canvas.width / 2, canvas.height);
        gradient.addColorStop(0, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2 + 42);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.beginPath();
        context.moveTo(0, 0);
        context.lineTo(canvas.width * 20 / 100, 0);
        context.lineTo(canvas.width * 30 / 100, canvas.height / 2.5);
        context.lineTo(canvas.width * 20 / 100, canvas.height);
        context.lineTo(0, canvas.height);
        context.lineTo(0, 0);
        context.closePath();
        context.stroke();
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2 + 42);
        gradient.addColorStop(0.500, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.beginPath();
        context.moveTo(canvas.width * 70 / 100, 0);
        context.lineTo(canvas.width, 0);
        context.lineTo(canvas.width, canvas.height);
        context.lineTo(canvas.width * 70 / 100, canvas.height);
        context.lineTo(canvas.width * 80 / 100, canvas.height / 2.5);
        context.lineTo(canvas.width * 70 / 100, 0);
        context.closePath();
        context.stroke();
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }, function() {
        var args, canvas, colorScheme, context, gradient, gradientType, randomVal1, randomVal2;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        canvas = context.canvas;
        if (!GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = GradientGen.options.definedVal1;
          randomVal2 = GradientGen.options.definedVal2;
          gradientType = GradientGen.options.gradientType;
        } else if (GradientGen.options.isDefault) {
          colorScheme = GradientGen.options.colorScheme;
          randomVal1 = app.getRandom(0, colorScheme.length - 1);
          randomVal2 = app.getRandom(0, colorScheme.length - 1);
          gradientType = GradientGen.options.gradientType;
        }
        context.fillStyle = '#fff';
        context.clearRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        gradient = context.createLinearGradient(0, canvas.height / 2, canvas.width, canvas.height / 2 + 42);
        gradient.addColorStop(0.000, '#' + colorScheme[randomVal1]);
        gradient.addColorStop(1.000, '#' + colorScheme[randomVal2]);
        context.fillStyle = gradient;
        context.lineWidth = 0.5;
        context.strokeStyle = gradient;
        context.rect(canvas.width * 30 / 100, canvas.height * 22 / 100, canvas.width * 65 / 100, canvas.height * 70 / 100);
        context.closePath();
        context.stroke();
        context.fill();
        GradientGen.options.definedVal1 = randomVal1;
        return GradientGen.options.definedVal2 = randomVal2;
      }
    ];
    return this.draw = function() {
      var args, canvas, context, definedVariant, initColorScheme, model, randomVariant;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      initColorScheme = function() {
        var hue, scm, variation, variations;
        scm = new ColorScheme();
        hue = app.getRandom(0.2, 359, 1);
        variations = ['default', 'pastel', 'soft', 'light', 'hard', 'pale'];
        variation = variations[app.getRandom(0, variations.length - 1)];
        scm.from_hue(hue).scheme('tetrade').distance(0.1).add_complement(false).variation(variation).web_safe(false);
        return scm.colors();
      };
      context = canvas.getContext("2d");
      $.extend(GradientGen.options, model.get('generators.gradientGen'));
      if (model.get('generators.gradientGen.isDefault')) {
        randomVariant = app.getRandom(0, this.gradientVariants.length - 1);
        GradientGen.options.colorScheme = initColorScheme();
        this.gradientVariants[randomVariant](context);
        GradientGen.options.gradientVariantNum = randomVariant;
        GradientGen.options.isDefault = false;
        return model.set('generators.gradientGen', GradientGen.options, {
          silent: true
        });
      } else if (!model.get('generators.gradientGen.isDefault')) {
        definedVariant = model.get('generators.gradientGen.gradientVariantNum');
        return this.gradientVariants[definedVariant](context);
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmRfZ2VuZXJhdG9yL2dlbmVyYXRvcnMvZ3JhZGllbnQtZ2VuZXJhdG9yLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsa0JBQUE7O0FBQUEsRUFBQSxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQUwsQ0FBWSxzQ0FBWixFQUFvRCxTQUFDLFdBQUQsR0FBQTtBQUduRCxJQUFBLFdBQVcsQ0FBQyxPQUFaLEdBQXNCLEVBQXRCLENBQUE7QUFBQSxJQUNBLElBQUMsQ0FBQSxnQkFBRCxHQUFvQjtNQUVuQixTQUFBLEdBQUE7QUFHQyxZQUFBLGFBQUE7QUFBQSxRQUhBLHdCQUFRLDhEQUdSLENBQUE7ZUFBQSxPQUFPLENBQUMsU0FBUixDQUFrQixDQUFsQixFQUFvQixDQUFwQixFQUFzQixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQXJDLEVBQTJDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBMUQsRUFIRDtNQUFBLENBRm1CLEVBUW5CLFNBQUEsR0FBQTtBQUVDLFlBQUEseUJBQUE7QUFBQSxRQUZBLHdCQUFRLDhEQUVSLENBQUE7QUFBQSxRQUFBLElBQUcsQ0FBQSxXQUFZLENBQUMsT0FBTyxDQUFDLFNBQXhCO0FBQ0MsVUFBQSxVQUFBLEdBQWEsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFqQyxDQUREO1NBQUEsTUFFSyxJQUFHLFdBQVcsQ0FBQyxPQUFPLENBQUMsU0FBdkI7QUFDSixVQUFBLFVBQUEsR0FBYSxHQUFHLENBQUMsU0FBSixDQUFjLENBQWQsRUFBZ0IsV0FBVyxDQUFDLE9BQU8sQ0FBQyxXQUFXLENBQUMsTUFBaEMsR0FBdUMsQ0FBdkQsQ0FBYixDQURJO1NBRkw7QUFBQSxRQUtBLE9BQU8sQ0FBQyxTQUFSLEdBQW9CLE1BTHBCLENBQUE7QUFBQSxRQU1BLE9BQU8sQ0FBQyxTQUFSLENBQWtCLENBQWxCLEVBQW9CLENBQXBCLEVBQXNCLE9BQU8sQ0FBQyxNQUFNLENBQUMsS0FBckMsRUFBNEMsT0FBTyxDQUFDLE1B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LGdCQUFrQixDQUFBLGFBQUEsQ0FBbkIsQ0FBbUMsT0FBbkMsQ0FKQSxDQUFBO0FBQUEsUUFLQSxXQUFXLENBQUMsT0FBTyxDQUFDLGtCQUFwQixHQUF5QyxhQUx6QyxDQUFBO0FBQUEsUUFPQSxXQUFXLENBQUMsT0FBTyxDQUFDLFNBQXBCLEdBQWdDLEtBUGhDLENBQUE7ZUFTQSxLQUFLLENBQUMsR0FBTixDQUFVLHdCQUFWLEVBQW9DLFdBQVcsQ0FBQyxPQUFoRCxFQUNDO0FBQUEsVUFBQSxNQUFBLEVBQVEsSUFBUjtTQURELEVBWEQ7T0FBQSxNQWNLLElBQUcsQ0FBQSxLQUFNLENBQUMsR0FBTixDQUFVLGtDQUFWLENBQUo7QUFFSixRQUFBLGNBQUEsR0FBaUIsS0FBSyxDQUFDLEdBQU4sQ0FBVSwyQ0FBVixDQUFqQixDQUFBO2VBQ0EsSUFBQyxDQUFBLGdCQUFrQixDQUFBLGNBQUEsQ0FBbkIsQ0FBb0MsT0FBcEMsRUFISTtPQS9CRTtJQUFBLEVBdnZCMkM7RUFBQSxDQUFwRCxDQUFBLENBQUE7QUFBQSIsImZpbGUiOiJjYXJkX2dlbmVyYXRvci9nZW5lcmF0b3JzL2dyYWRpZW50LWdlbmVyYXRvci5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkBhcHAubW9kdWxlICdDYXJkR2VuZXJhdG9yLmdlbmVyYXRvcnMuZ3JhZGllbnRHZW4nLCAoR3JhZGllbnRHZW4pIC0+XG5cdCMgVE9ET1xuXHQjIFtdIHNhdmUgbmV3IHZhbHVlcyB0byBtb2RlbCBwcm9wZXJseSBhbmQgaW4gb25lIHBsYWNlICggbWF5IGJlIHJlbmRlciBieSBwcm9taXNlcyBhbmQgdGhlbiBzYXZlIHZlbHVlcyApXG5cdEdyYWRpZW50R2VuLm9wdGlvbnMgPSB7fVxuXHRAZ3JhZGllbnRWYXJpYW50cyA9IFtcblx0XHQjMFxuXHRcdChjb250ZXh0LGFyZ3MuLi4pIC0+XG5cblx0XHRcdCMgY29udGV4dC5maWxsU3R5bGUgPSAncmdiYSgwLDAsMCwwKSdcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCxjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cblx0XHQjMVxuXHRcdChjb250ZXh0LGFyZ3MuLi4pIC0+XG5cblx0XHRcdGlmICFHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRyYW5kb21WYWwxID0gYXBwLmdldFJhbmRvbSgwLEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmYnXG5cdFx0XHRjb250ZXh0LmNsZWFyUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyMnK0dyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLGNvbnRleHQuY2FudmFzLmhlaWdodClcblxuXHRcdFx0IyBzYXZlIG9wdGlvbnMgdG8gY3VycmVudCBtb2RlbFxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMSA9IHJhbmRvbVZhbDFcblxuXHRcdCMyXG5cdFx0KGNvbnRleHQsYXJncy4uLikgLT5cblx0XHRcdGlmICFHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRyYW5kb21WYWwxID0gYXBwLmdldFJhbmRvbSgwLEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmYnXG5cdFx0XHRjb250ZXh0LmNsZWFyUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyMnK0dyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLzIsY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXG5cdFx0XHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXG5cdFx0IzNcblx0XHQoY29udGV4dCxhcmdzLi4uKSAtPlxuXG5cdFx0XHRpZiAhR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0cmFuZG9tVmFsMSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDFcblx0XHRcdGVsc2UgaWYgR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oMCxHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lLmxlbmd0aC0xKVxuXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmJ1xuXHRcdFx0Y29udGV4dC5jbGVhclJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRjb250ZXh0LmZpbGxSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0XG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICcjJytHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lW3JhbmRvbVZhbDFdXG5cdFx0XHRjb250ZXh0LmZpbGxSZWN0KDAsY29udGV4dC5jYW52YXMuaGVpZ2h0LzIsY29udGV4dC5jYW52YXMud2lkdGgsY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXG5cdFx0XHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXG5cdFx0IzRcblx0XHQoY29udGV4dCxhcmdzLi4uKSAtPlxuXHRcdFx0Y2FudmFzID0gY29udGV4dC5jYW52YXNcblx0XHRcdGlmICFHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDFcblx0XHRcdFx0cmFuZG9tVmFsMiA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDJcblx0XHRcdGVsc2UgaWYgR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cblx0XHRcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMiA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZidcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5maWxsUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdFxuXG5cdFx0XHRncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgY2FudmFzLmhlaWdodC8yLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQqMS41KTtcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjAwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV0gKVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wKDAuMjAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwxXSApXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AoMC44MDAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDJdIClcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLjAwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMl0gKVxuXG5cdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpXG5cdFx0XHRjb250ZXh0Lm1vdmVUbyhjYW52YXMud2lkdGgqNzUvMTAwLDApXG5cdFx0XHRjb250ZXh0LmxpbmVUbyhjYW52YXMud2lkdGgsMClcblx0XHRcdGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCxjYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoLzIsY2FudmFzLmhlaWdodClcblx0XHRcdGNvbnRleHQubGluZVRvKGNhbnZhcy53aWR0aCo3NS8xMDAsMClcblx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKClcblx0XHRcdGNvbnRleHQubGluZVdpZHRoID0gMC41XG5cdFx0XHRjb250ZXh0LnN0cm9rZVN0eWxlID0gZ3JhZGllbnRcblx0XHRcdGNvbnRleHQuc3Ryb2tlKClcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gZ3JhZGllbnRcblx0XHRcdGNvbnRleHQuZmlsbCgpXG5cblx0XHRcdCMgc2F2ZSBvcHRpb25zIHRvIGN1cnJlbnQgbW9kZWxcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDEgPSByYW5kb21WYWwxXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyID0gcmFuZG9tVmFsMlxuXHRcdFx0XHQjIGNvbG9yU2NoZW1lOiBjb2xvclNjaGVtZVxuXG5cdFx0IzVcblx0XHQoY29udGV4dCxhcmdzLi4uKSAtPlxuXG5cdFx0XHRpZiAhR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0cmFuZG9tVmFsMSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDFcblx0XHRcdFx0cmFuZG9tVmFsMiA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDJcblx0XHRcdGVsc2UgaWYgR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oMCxHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lLmxlbmd0aC0xKVxuXHRcdFx0XHRyYW5kb21WYWwyID0gYXBwLmdldFJhbmRvbSgwLjYsMC45LDIpXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmYnXG5cdFx0XHRjb250ZXh0LmNsZWFyUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyMnK0dyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCxjb250ZXh0LmNhbnZhcy5oZWlnaHQqcmFuZG9tVmFsMiAsY29udGV4dC5jYW52YXMud2lkdGgsY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXG5cdFx0XHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMiA9IHJhbmRvbVZhbDJcblxuXHRcdCM2XG5cdFx0KGNvbnRleHQsYXJncy4uLikgLT5cblxuXHRcdFx0Y2FudmFzID0gY29udGV4dC5jYW52YXNcblxuXHRcdFx0aWYgIUdyYWRpZW50R2VuLm9wdGlvbnMuaXNEZWZhdWx0XG5cdFx0XHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdFx0XHRyYW5kb21WYWwyID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMlxuXHRcdFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMiA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZidcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5maWxsUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdFxuXHRcdFx0Y29udGV4dC5yZWN0KCBjYW52YXMud2lkdGgqMTAvMTAwLCAwLCBjYW52YXMud2lkdGgqNDAvMTAwLCBjYW52YXMuaGVpZ2h0KVxuXHRcdFx0Z3JhZGllbnQgPSBjb250ZXh0LmNyZWF0ZUxpbmVhckdyYWRpZW50KCAwLCBjYW52YXMuaGVpZ2h0LzIsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodC8yKTtcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjAwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV0gKVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wKDEuMDAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwyXSApXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9IGdyYWRpZW50XG5cdFx0XHRjb250ZXh0LmZpbGwoKVxuXG5cdFx0XHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMiA9IHJhbmRvbVZhbDJcblxuXHRcdCM3XG5cdFx0KGNvbnRleHQsYXJncy4uLikgLT5cblxuXHRcdFx0Y2FudmFzID0gY29udGV4dC5jYW52YXNcblxuXHRcdFx0aWYgIUdyYWRpZW50R2VuLm9wdGlvbnMuaXNEZWZhdWx0XG5cdFx0XHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdFx0XHRyYW5kb21WYWwyID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMlxuXHRcdFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblxuXHRcdFx0XHRyYW5kb21WYWwxID0gYXBwLmdldFJhbmRvbSgwLGNvbG9yU2NoZW1lLmxlbmd0aC0xKVxuXHRcdFx0XHRyYW5kb21WYWwyID0gYXBwLmdldFJhbmRvbSgwLGNvbG9yU2NoZW1lLmxlbmd0aC0xKVxuXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmJ1xuXHRcdFx0Y29udGV4dC5jbGVhclJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRjb250ZXh0LmZpbGxSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0XG5cdFx0XHRncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgY2FudmFzLmhlaWdodC8yLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQqMC4yNSk7XG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AoMC4wMDAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDFdIClcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjQ5NSwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV0gKVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wKDAuMDAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwyXSApXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AoMC41MDAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDJdIClcblxuXHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKVxuXHRcdFx0Y29udGV4dC5tb3ZlVG8oMCwwKVxuXHRcdFx0Y29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoKjIwLzEwMCwwKVxuXHRcdFx0Y29udGV4dC5saW5lVG8oY2FudmFzLndpZHRoKjM3LzEwMCxjYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5saW5lVG8oMCxjYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5saW5lVG8oMCwwKVxuXHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKVxuXHRcdFx0Y29udGV4dC5saW5lV2lkdGggPSAwLjVcblx0XHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBncmFkaWVudFxuXHRcdFx0Y29udGV4dC5zdHJva2UoKVxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSBncmFkaWVudFxuXHRcdFx0Y29udGV4dC5maWxsKClcblxuXHRcdFx0IyBzYXZlIG9wdGlvbnMgdG8gY3VycmVudCBtb2RlbFxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMSA9IHJhbmRvbVZhbDFcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDIgPSByYW5kb21WYWwyXG5cblx0XHQjOFxuXHRcdChjb250ZXh0LGFyZ3MuLi4pIC0+XG5cblx0XHRcdGNhbnZhcyA9IGNvbnRleHQuY2FudmFzXG5cblx0XHRcdGlmICFHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDFcblx0XHRcdFx0cmFuZG9tVmFsMiA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDJcblx0XHRcdFx0cmFuZG9tVmFsMyA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDNcblx0XHRcdFx0cmFuZG9tVmFsNCA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDRcblx0XHRcdFx0cmFuZG9tVmFsNSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDVcblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMiA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMyA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsNCA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsNSA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0IyBUT0RPIGdlbmVyYXRlIHJhbmRvbSBncmFkaWVudFR5cGUhXG5cdFx0XHRcdGdyYWRpZW50VHlwZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZ3JhZGllbnRUeXBlXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmYnXG5cdFx0XHRjb250ZXh0LmNsZWFyUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0Z3JhZGllbnQgPSBjb250ZXh0LmNyZWF0ZVJhZGlhbEdyYWRpZW50KGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCwgMC4wMDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodCwgODAuMDAwKVxuXG5cdFx0XHQjIEFkZCBjb2xvcnNcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjAwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjIwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjIxNSwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMl1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjQwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMl1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjQxNSwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsM11cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjYwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsM11cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjYxNSwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsNF1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjgwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsNF1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjgxNSwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsNV1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjk2MCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsNV1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAxLjAwMCwgXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDEuMDAwKVwiXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gZ3JhZGllbnRcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XG5cblx0XHRcdCMgc2F2ZSBvcHRpb25zIHRvIGN1cnJlbnQgbW9kZWxcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDEgPSByYW5kb21WYWwxXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyID0gcmFuZG9tVmFsMlxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMyA9IHJhbmRvbVZhbDNcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDQgPSByYW5kb21WYWw0XG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWw1ID0gcmFuZG9tVmFsNVxuXG5cdFx0Izlcblx0XHQoY29udGV4dCxhcmdzLi4uKSAtPlxuXG5cdFx0XHRjYW52YXMgPSBjb250ZXh0LmNhbnZhc1xuXG5cdFx0XHRpZiAhR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0XHRcdHJhbmRvbVZhbDEgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxXG5cdFx0XHRcdHJhbmRvbVZhbDIgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyXG5cdFx0XHRcdHJhbmRvbVZhbDMgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwzXG5cdFx0XHRcdHJhbmRvbVZhbDQgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWw0XG5cblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMiA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMyA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsNCA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblxuXHRcdFx0XHQjIFRPRE8gZ2VuZXJhdGUgcmFuZG9tIGdyYWRpZW50VHlwZSFcblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZidcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5maWxsUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlUmFkaWFsR3JhZGllbnQoY2FudmFzLndpZHRoKzUsIGNhbnZhcy5oZWlnaHQvMiwgMC4wMDAsIGNhbnZhcy53aWR0aCs1LCBjYW52YXMuaGVpZ2h0LzIsIDEyMC4wMDApXG5cblx0XHRcdCMgQWRkIGNvbG9yc1xuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuMDAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwxXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuMDczLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwxXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuMDgwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwyXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuMjM1LCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwyXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuMjUwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwzXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuNDg1LCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwzXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuNTAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWw0XVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuNzM1LCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWw0XVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuNzUwLCBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMS4wMDApXCJcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAxLjAwMCwgXCJyZ2JhKDI1NSwgMjU1LCAyNTUsIDEuMDAwKVwiXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gZ3JhZGllbnRcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QgMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0XG5cblx0XHRcdCMgc2F2ZSBvcHRpb25zIHRvIGN1cnJlbnQgbW9kZWxcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDEgPSByYW5kb21WYWwxXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyID0gcmFuZG9tVmFsMlxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMyA9IHJhbmRvbVZhbDNcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDQgPSByYW5kb21WYWw0XG5cblx0XHQjMTBcblx0XHQoY29udGV4dCxhcmdzLi4uKSAtPlxuXG5cdFx0XHRjYW52YXMgPSBjb250ZXh0LmNhbnZhc1xuXG5cdFx0XHRpZiAhR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0XHRcdHJhbmRvbVZhbDEgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxXG5cdFx0XHRcdHJhbmRvbVZhbDIgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyXG5cdFx0XHRcdHJhbmRvbVZhbDMgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwzXG5cdFx0XHRcdHJhbmRvbVZhbDQgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWw0XG5cblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMiA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMyA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsNCA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblxuXHRcdFx0XHQjIFRPRE8gZ2VuZXJhdGUgcmFuZG9tIGdyYWRpZW50VHlwZSFcblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZidcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5maWxsUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlUmFkaWFsR3JhZGllbnQoY2FudmFzLndpZHRoLzIsIGNhbnZhcy5oZWlnaHQtOCwgMC4wMDAsIGNhbnZhcy53aWR0aC8yLCBjYW52YXMuaGVpZ2h0KzIwMCwgMjcwLjAwMClcblxuXHRcdFx0IyBBZGQgY29sb3JzXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC4wMDAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDFdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC4wNzMsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDFdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC4wODUsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDJdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC4yMzUsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDJdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC4yNTAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDNdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC40ODAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDNdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC41MDAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDRdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC43MzUsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDRdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC43NTAsIFwicmdiYSgyNTUsIDI1NSwgMjU1LCAxLjAwMClcIlxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDEuMDAwLCBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMS4wMDApXCJcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSBncmFkaWVudFxuXHRcdFx0Y29udGV4dC5maWxsUmVjdCAwLCAwLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHRcblxuXHRcdFx0IyBzYXZlIG9wdGlvbnMgdG8gY3VycmVudCBtb2RlbFxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMSA9IHJhbmRvbVZhbDFcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDIgPSByYW5kb21WYWwyXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwzID0gcmFuZG9tVmFsM1xuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsNCA9IHJhbmRvbVZhbDRcblxuXHRcdCMxMVxuXHRcdChjb250ZXh0LGFyZ3MuLi4pIC0+XG5cblx0XHRcdGNhbnZhcyA9IGNvbnRleHQuY2FudmFzXG5cblx0XHRcdGlmICFHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDFcblxuXHRcdFx0XHRncmFkaWVudFR5cGUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmdyYWRpZW50VHlwZVxuXG5cdFx0XHRlbHNlIGlmIEdyYWRpZW50R2VuLm9wdGlvbnMuaXNEZWZhdWx0XG5cdFx0XHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdFx0XHRyYW5kb21WYWwxID0gYXBwLmdldFJhbmRvbSgwLGNvbG9yU2NoZW1lLmxlbmd0aC0xKVxuXG5cdFx0XHRcdGdyYWRpZW50VHlwZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZ3JhZGllbnRUeXBlXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmYnXG5cdFx0XHRjb250ZXh0LmNsZWFyUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRcblx0XHRcdFxuXHRcdFx0Z3JhZGllbnQgPSBjb250ZXh0LmNyZWF0ZVJhZGlhbEdyYWRpZW50KGNhbnZhcy53aWR0aC8yLCAwICwgMC4wMDAsIGNhbnZhcy53aWR0aC8yLCAwLTMxMCwgNDAwLjAwMClcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjAwMCwgJyNmZmYnXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC43MzAsICcjZmZmJ1xuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuNzUwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwxXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDEuMDAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwxXVxuXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9IGdyYWRpZW50XG5cdFx0XHRjb250ZXh0LmZpbGxSZWN0IDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodFxuXG5cdFx0XHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXG5cdFx0IzEyXG5cdFx0KGNvbnRleHQsYXJncy4uLikgLT5cblxuXHRcdFx0Y2FudmFzID0gY29udGV4dC5jYW52YXNcblxuXHRcdFx0aWYgIUdyYWRpZW50R2VuLm9wdGlvbnMuaXNEZWZhdWx0XG5cdFx0XHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdFx0XHRyYW5kb21WYWwyID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMlxuXHRcdFx0XHRyYW5kb21WYWwzID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsM1xuXG5cdFx0XHRcdGdyYWRpZW50VHlwZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZ3JhZGllbnRUeXBlXG5cblx0XHRcdGVsc2UgaWYgR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0XHRcdHJhbmRvbVZhbDEgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cdFx0XHRcdHJhbmRvbVZhbDIgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cdFx0XHRcdHJhbmRvbVZhbDMgPSBhcHAuZ2V0UmFuZG9tKDQwLDE1MClcblxuXHRcdFx0XHRncmFkaWVudFR5cGUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmdyYWRpZW50VHlwZVxuXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmJ1xuXHRcdFx0Y29udGV4dC5jbGVhclJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRjb250ZXh0LmZpbGxSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0XG5cdFx0XHRcblx0XHRcdGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVSYWRpYWxHcmFkaWVudChjYW52YXMud2lkdGgvMiwgY2FudmFzLmhlaWdodC8yICwgMC4wMDAsIGNhbnZhcy53aWR0aC8yLCBjYW52YXMuaGVpZ2h0LzIsIHJhbmRvbVZhbDMpXG5cblx0XHRcdCMgQWRkIGNvbG9yc1xuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuMDAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwxXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuNzM1LCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwxXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuNzUwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwyXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDEuMDAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwyXVxuXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9IGdyYWRpZW50XG5cdFx0XHRjb250ZXh0LmZpbGxSZWN0IDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodFxuXG5cdFx0XHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMiA9IHJhbmRvbVZhbDJcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDMgPSByYW5kb21WYWwzXG5cblx0XHQjMTNcblx0XHQoY29udGV4dCxhcmdzLi4uKSAtPlxuXG5cdFx0XHRjYW52YXMgPSBjb250ZXh0LmNhbnZhc1xuXG5cdFx0XHRpZiAhR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0XHRcdHJhbmRvbVZhbDEgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxXG5cdFx0XHRcdHJhbmRvbVZhbDIgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyXG5cblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHRcdFx0cmFuZG9tVmFsMiA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblxuXHRcdFx0XHRncmFkaWVudFR5cGUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmdyYWRpZW50VHlwZVxuXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmJ1xuXHRcdFx0Y29udGV4dC5jbGVhclJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRjb250ZXh0LmZpbGxSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0XG5cdFx0XHRcblx0XHRcdGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCBjYW52YXMuaGVpZ2h0LzIsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodC8yKzQyKVxuXG5cdFx0XHQjIEFkZCBjb2xvcnNcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjAwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjU1MCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjc1MCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMl1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAxLjAwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMl1cblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSBncmFkaWVudFxuXHRcdFx0Y29udGV4dC5saW5lV2lkdGggPSAwLjVcblx0XHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBncmFkaWVudFxuXG5cdFx0XHRjb250ZXh0LmJlZ2luUGF0aCgpXG5cdFx0XHRjb250ZXh0Lm1vdmVUbyBjYW52YXMud2lkdGgqNjcvMTAwLDBcblx0XHRcdGNvbnRleHQubGluZVRvIGNhbnZhcy53aWR0aCo3MS8xMDAsMFxuXHRcdFx0Y29udGV4dC5saW5lVG8gY2FudmFzLndpZHRoKjYxLzEwMCxjYW52YXMuaGVpZ2h0XG5cdFx0XHRjb250ZXh0LmxpbmVUbyBjYW52YXMud2lkdGgqNTcvMTAwLGNhbnZhcy5oZWlnaHRcblx0XHRcdGNvbnRleHQubGluZVRvIGNhbnZhcy53aWR0aCo2Ny8xMDAsMFxuXG5cdFx0XHRjb250ZXh0Lm1vdmVUbyBjYW52YXMud2lkdGgqNzQvMTAwLDBcblx0XHRcdGNvbnRleHQubGluZVRvIGNhbnZhcy53aWR0aCo4MS8xMDAsMFxuXHRcdFx0Y29udGV4dC5saW5lVG8gY2FudmFzLndpZHRoKjcxLzEwMCxjYW52YXMuaGVpZ2h0XG5cdFx0XHRjb250ZXh0LmxpbmVUbyBjYW52YXMud2lkdGgqNjQvMTAwLGNhbnZhcy5oZWlnaHRcblxuXHRcdFx0Y29udGV4dC5jbG9zZVBhdGgoKVxuXHRcdFx0Y29udGV4dC5zdHJva2UoKVxuXHRcdFx0Y29udGV4dC5maWxsKClcblxuXHRcdFx0IyBGaWxsIHdpdGggZ3JhZGllbnRcblx0XHRcdCMgY29udGV4dC5maWxsU3R5bGUgPSBncmFkaWVudFxuXHRcdFx0IyBjb250ZXh0LmZpbGxSZWN0IDAsIDAsIGNhbnZhcy53aWR0aCwgY2FudmFzLmhlaWdodFxuXG5cdFx0XHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMiA9IHJhbmRvbVZhbDJcblxuXHRcdCMxNFxuXHRcdChjb250ZXh0LGFyZ3MuLi4pIC0+XG5cblx0XHRcdGNhbnZhcyA9IGNvbnRleHQuY2FudmFzXG5cblx0XHRcdGlmICFHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHRcdFx0cmFuZG9tVmFsMSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDFcblx0XHRcdFx0cmFuZG9tVmFsMiA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDJcblx0XHRcdGVsc2UgaWYgR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0XHRcdHJhbmRvbVZhbDEgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cdFx0XHRcdHJhbmRvbVZhbDIgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmYnXG5cdFx0XHRjb250ZXh0LmNsZWFyUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0XHRcblx0XHRcdGNvbnRleHQucmVjdCggMCxjYW52YXMuaGVpZ2h0KjUwLzEwMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KjQwLzEwMClcblx0XHRcdGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudCggY2FudmFzLndpZHRoLzIsIDAgLCBjYW52YXMud2lkdGgvMiwgY2FudmFzLmhlaWdodCk7XG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AoMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV0gKVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wKDEsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDJdIClcblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gZ3JhZGllbnRcblx0XHRcdGNvbnRleHQuZmlsbCgpXG5cblx0XHRcdCMgc2F2ZSBvcHRpb25zIHRvIGN1cnJlbnQgbW9kZWxcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDEgPSByYW5kb21WYWwxXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyID0gcmFuZG9tVmFsMlxuXHRcdFx0XHQjIGNvbG9yU2NoZW1lOiBjb2xvclNjaGVtZVxuXG5cdFx0IzE1XG5cdFx0KGNvbnRleHQsYXJncy4uLikgLT5cblxuXHRcdFx0Y2FudmFzID0gY29udGV4dC5jYW52YXNcblxuXHRcdFx0aWYgIUdyYWRpZW50R2VuLm9wdGlvbnMuaXNEZWZhdWx0XG5cdFx0XHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdFx0XHRyYW5kb21WYWwyID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMlxuXG5cdFx0XHRcdGdyYWRpZW50VHlwZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZ3JhZGllbnRUeXBlXG5cblx0XHRcdGVsc2UgaWYgR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0XHRcdHJhbmRvbVZhbDEgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cdFx0XHRcdHJhbmRvbVZhbDIgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZidcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5maWxsUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgY2FudmFzLmhlaWdodC8yLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQvMis0MilcblxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuMDAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwxXVxuXHRcdFx0Z3JhZGllbnQuYWRkQ29sb3JTdG9wIDAuNTAwLCAnIycgKyBjb2xvclNjaGVtZVtyYW5kb21WYWwyXVxuXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9IGdyYWRpZW50XG5cdFx0XHRjb250ZXh0LmxpbmVXaWR0aCA9IDAuNVxuXHRcdFx0Y29udGV4dC5zdHJva2VTdHlsZSA9IGdyYWRpZW50XG5cblx0XHRcdGNvbnRleHQuYmVnaW5QYXRoKClcblx0XHRcdGNvbnRleHQubW92ZVRvIDAsMFxuXHRcdFx0Y29udGV4dC5saW5lVG8gY2FudmFzLndpZHRoKjIwLzEwMCwwXG5cdFx0XHRjb250ZXh0LmxpbmVUbyBjYW52YXMud2lkdGgqMzAvMTAwLGNhbnZhcy5oZWlnaHQvMi41XG5cdFx0XHRjb250ZXh0LmxpbmVUbyBjYW52YXMud2lkdGgqMjAvMTAwLGNhbnZhcy5oZWlnaHRcblx0XHRcdGNvbnRleHQubGluZVRvIDAsY2FudmFzLmhlaWdodFxuXHRcdFx0Y29udGV4dC5saW5lVG8gMCwwXG5cblx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKClcblx0XHRcdGNvbnRleHQuc3Ryb2tlKClcblx0XHRcdGNvbnRleHQuZmlsbCgpXG5cblx0XHRcdCMgc2F2ZSBvcHRpb25zIHRvIGN1cnJlbnQgbW9kZWxcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDEgPSByYW5kb21WYWwxXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyID0gcmFuZG9tVmFsMlxuXG5cdFx0IzE2XG5cdFx0KGNvbnRleHQsYXJncy4uLikgLT5cblxuXHRcdFx0Y2FudmFzID0gY29udGV4dC5jYW52YXNcblxuXHRcdFx0aWYgIUdyYWRpZW50R2VuLm9wdGlvbnMuaXNEZWZhdWx0XG5cdFx0XHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdFx0XHRyYW5kb21WYWwyID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMlxuXG5cdFx0XHRcdGdyYWRpZW50VHlwZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZ3JhZGllbnRUeXBlXG5cblx0XHRcdGVsc2UgaWYgR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0XHRcdHJhbmRvbVZhbDEgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cdFx0XHRcdHJhbmRvbVZhbDIgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZidcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5maWxsUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgY2FudmFzLmhlaWdodC8yLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQvMis0MilcblxuXHRcdFx0IyBBZGQgY29sb3JzXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMC41MDAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDFdXG5cdFx0XHRncmFkaWVudC5hZGRDb2xvclN0b3AgMS4wMDAsICcjJyArIGNvbG9yU2NoZW1lW3JhbmRvbVZhbDJdXG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gZ3JhZGllbnRcblx0XHRcdGNvbnRleHQubGluZVdpZHRoID0gMC41XG5cdFx0XHRjb250ZXh0LnN0cm9rZVN0eWxlID0gZ3JhZGllbnRcblxuXHRcdFx0Y29udGV4dC5iZWdpblBhdGgoKVxuXHRcdFx0Y29udGV4dC5tb3ZlVG8gY2FudmFzLndpZHRoKjcwLzEwMCwwXG5cdFx0XHRjb250ZXh0LmxpbmVUbyBjYW52YXMud2lkdGgsMFxuXHRcdFx0Y29udGV4dC5saW5lVG8gY2FudmFzLndpZHRoLGNhbnZhcy5oZWlnaHRcblx0XHRcdGNvbnRleHQubGluZVRvIGNhbnZhcy53aWR0aCo3MC8xMDAsY2FudmFzLmhlaWdodFxuXHRcdFx0Y29udGV4dC5saW5lVG8gY2FudmFzLndpZHRoKjgwLzEwMCxjYW52YXMuaGVpZ2h0LzIuNVxuXHRcdFx0Y29udGV4dC5saW5lVG8gY2FudmFzLndpZHRoKjcwLzEwMCwwXG5cblx0XHRcdGNvbnRleHQuY2xvc2VQYXRoKClcblx0XHRcdGNvbnRleHQuc3Ryb2tlKClcblx0XHRcdGNvbnRleHQuZmlsbCgpXG5cblx0XHRcdCMgc2F2ZSBvcHRpb25zIHRvIGN1cnJlbnQgbW9kZWxcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDEgPSByYW5kb21WYWwxXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyID0gcmFuZG9tVmFsMlxuXG5cdFx0IzE4XG5cdFx0KGNvbnRleHQsYXJncy4uLikgLT5cblxuXHRcdFx0Y2FudmFzID0gY29udGV4dC5jYW52YXNcblxuXHRcdFx0aWYgIUdyYWRpZW50R2VuLm9wdGlvbnMuaXNEZWZhdWx0XG5cdFx0XHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdFx0XHRyYW5kb21WYWwyID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMlxuXG5cdFx0XHRcdGdyYWRpZW50VHlwZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZ3JhZGllbnRUeXBlXG5cblx0XHRcdGVsc2UgaWYgR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0XHRcdHJhbmRvbVZhbDEgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cdFx0XHRcdHJhbmRvbVZhbDIgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cblx0XHRcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnI2ZmZidcblx0XHRcdGNvbnRleHQuY2xlYXJSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCwgY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5maWxsUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsIGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHRcdFxuXHRcdFx0XG5cdFx0XHRncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlTGluZWFyR3JhZGllbnQoMCwgY2FudmFzLmhlaWdodC8yLCBjYW52YXMud2lkdGgsIGNhbnZhcy5oZWlnaHQvMis0Milcblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAwLjAwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGdyYWRpZW50LmFkZENvbG9yU3RvcCAxLjAwMCwgJyMnICsgY29sb3JTY2hlbWVbcmFuZG9tVmFsMl1cblxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSBncmFkaWVudFxuXHRcdFx0Y29udGV4dC5saW5lV2lkdGggPSAwLjVcblx0XHRcdGNvbnRleHQuc3Ryb2tlU3R5bGUgPSBncmFkaWVudFxuXG5cdFx0XHRjb250ZXh0LnJlY3QoY2FudmFzLndpZHRoKjMwLzEwMCxjYW52YXMuaGVpZ2h0KjIyLzEwMCxjYW52YXMud2lkdGgqNjUvMTAwLGNhbnZhcy5oZWlnaHQqNzAvMTAwKVxuXG5cdFx0XHRjb250ZXh0LmNsb3NlUGF0aCgpXG5cdFx0XHRjb250ZXh0LnN0cm9rZSgpXG5cdFx0XHRjb250ZXh0LmZpbGwoKVxuXG5cdFx0XHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMiA9IHJhbmRvbVZhbDJcblxuXHRcdCMgIyDQmNC80L/RgNC+0LLQuNC30LDRhtC40Y9cblx0XHQjIChjb250ZXh0LGFyZ3MuLi4pIC0+XG5cdFx0IyBcdGlmICFHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdCMgXHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdCMgXHRcdHJhbmRvbVZhbDEgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxXG5cdFx0IyBcdFx0cmFuZG9tVmFsMiA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDJcblx0XHQjIFx0XHRyYW5kb21WYWwzID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsM1xuXHRcdCMgXHRcdHJhbmRvbVZhbDQgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWw0XG5cdFx0IyBcdFx0cmFuZG9tVmFsNSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDVcblx0XHQjIFx0XHRyYW5kb21WYWw2ID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsNlxuXHRcdCMgXHRcdGdyYWRpZW50VHlwZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZ3JhZGllbnRUeXBlXG5cblx0XHQjIFx0ZWxzZSBpZiBHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdCMgXHRcdGNvbG9yU2NoZW1lID0gR3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZVxuXHRcdCMgXHRcdHJhbmRvbVZhbDEgPSBhcHAuZ2V0UmFuZG9tKDAsY29sb3JTY2hlbWUubGVuZ3RoLTEpXG5cdFx0IyBcdFx0cmFuZG9tVmFsMiA9IGFwcC5nZXRSYW5kb20oMCxjb2xvclNjaGVtZS5sZW5ndGgtMSlcblx0XHQjIFx0XHRyYW5kb21WYWwzID0gYXBwLmdldFJhbmRvbSgwLCAxNTApXG5cdFx0IyBcdFx0cmFuZG9tVmFsNCA9IGFwcC5nZXRSYW5kb20oMCwgMTUwKVxuXHRcdCMgXHRcdHJhbmRvbVZhbDUgPSBhcHAuZ2V0UmFuZG9tKDAsIDE1MClcblx0XHQjIFx0XHRyYW5kb21WYWw2ID0gYXBwLmdldFJhbmRvbSgwLCAxNTApXG5cdFx0IyBcdFx0IyBUT0RPIGdlbmVyYXRlIHJhbmRvbSBncmFkaWVudFR5cGUhXG5cdFx0IyBcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdCMgXHRjb250ZXh0LmZpbGxTdHlsZSA9ICdyZ2JhKDAsMCwwLDApJ1xuXHRcdCMgXHRjb250ZXh0LmZpbGxSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCxjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cdFx0IyBcdGlmIGdyYWRpZW50VHlwZSBpcyAnbGluZWFyJ1xuXHRcdCMgXHRcdGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudChyYW5kb21WYWwzLHJhbmRvbVZhbDQscmFuZG9tVmFsNSxyYW5kb21WYWw2KVxuXHRcdCMgXHRlbHNlIGlmIGdyYWRpZW50VHlwZSBpcyAncmFkaWFsJ1xuXHRcdCMgXHRcdGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVSYWRpYWxHcmFkaWVudCgxNTAsNzUsNTAsMTUwLDc1LDQ5KVxuXHRcdCMgXHRncmFkaWVudC5hZGRDb2xvclN0b3AoMCwnIycrY29sb3JTY2hlbWVbcmFuZG9tVmFsMV0pXG5cdFx0IyBcdGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCcjJytjb2xvclNjaGVtZVtyYW5kb21WYWwyXSlcblx0XHQjIFx0Y29udGV4dC5maWxsU3R5bGUgPSBncmFkaWVudFxuXHRcdCMgXHRjb250ZXh0LmZpbGxSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCxjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cblx0XHQjIFx0IyBzYXZlIG9wdGlvbnMgdG8gY3VycmVudCBtb2RlbFxuXHRcdCMgXHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwxID0gcmFuZG9tVmFsMVxuXHRcdCMgXHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyID0gcmFuZG9tVmFsMlxuXHRcdCMgXHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwzID0gcmFuZG9tVmFsM1xuXHRcdCMgXHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWw0ID0gcmFuZG9tVmFsNFxuXHRcdCMgXHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWw1ID0gcmFuZG9tVmFsNVxuXHRcdCMgXHRHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWw2ID0gcmFuZG9tVmFsNlxuXG5cdFx0IyAjINCY0LzQv9GA0L7QstC40LfQsNGG0LjRjyAyXG5cdFx0IyAoY29udGV4dCxhcmdzLi4uKSAtPlxuXHRcdCMgXHRpZiAhR3JhZGllbnRHZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHQjIFx0XHRjb2xvclNjaGVtZSA9IEdyYWRpZW50R2VuLm9wdGlvbnMuY29sb3JTY2hlbWVcblx0XHQjIFx0XHRyYW5kb21WYWwxID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsMVxuXHRcdCMgXHRcdHJhbmRvbVZhbDIgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWwyXG5cdFx0IyBcdFx0cmFuZG9tVmFsMyA9IEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDNcblx0XHQjIFx0XHRyYW5kb21WYWw0ID0gR3JhZGllbnRHZW4ub3B0aW9ucy5kZWZpbmVkVmFsNFxuXHRcdCMgXHRcdHJhbmRvbVZhbDUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmRlZmluZWRWYWw1XG5cdFx0IyBcdFx0Z3JhZGllbnRUeXBlID0gR3JhZGllbnRHZW4ub3B0aW9ucy5ncmFkaWVudFR5cGVcblxuXHRcdCMgXHRlbHNlIGlmIEdyYWRpZW50R2VuLm9wdGlvbnMuaXNEZWZhdWx0XG5cdFx0IyBcdFx0Y29sb3JTY2hlbWUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmNvbG9yU2NoZW1lXG5cdFx0IyBcdFx0cmFuZG9tVmFsMSA9IGFwcC5nZXRSYW5kb20oNTAsMjUwKVxuXHRcdCMgXHRcdHJhbmRvbVZhbDIgPSBhcHAuZ2V0UmFuZG9tKDUwLDI1MClcblx0XHQjIFx0XHRyYW5kb21WYWwzID0gYXBwLmdldFJhbmRvbSg1MCwyMDApXG5cdFx0IyBcdFx0cmFuZG9tVmFsNCA9IGFwcC5nZXRSYW5kb20oNTAsMjAwKVxuXHRcdCMgXHRcdHJhbmRvbVZhbDUgPSAxNTBcblx0XHQjIFx0XHQjIFRPRE8gZ2VuZXJhdGUgcmFuZG9tIGdyYWRpZW50VHlwZSFcblx0XHQjIFx0XHRncmFkaWVudFR5cGUgPSBHcmFkaWVudEdlbi5vcHRpb25zLmdyYWRpZW50VHlwZVxuXG5cdFx0IyBcdGNvbnRleHQuZmlsbFN0eWxlID0gJ3JnYmEoMCwwLDAsMCknXG5cdFx0IyBcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLGNvbnRleHQuY2FudmFzLmhlaWdodClcblx0XHQjIFx0IyBpZiBncmFkaWVudFR5cGUgaXMgJ2xpbmVhcidcblx0XHQjIFx0IyBcdGdyYWRpZW50ID0gY29udGV4dC5jcmVhdGVMaW5lYXJHcmFkaWVudChyYW5kb21WYWwzLHJhbmRvbVZhbDQscmFuZG9tVmFsNSxyYW5kb21WYWw2KVxuXHRcdCMgXHQjIGVsc2UgaWYgZ3JhZGllbnRUeXBlIGlzICdyYWRpYWwnXG5cdFx0IyBcdCMgXHRncmFkaWVudCA9IGNvbnRleHQuY3JlYXRlUmFkaWFsR3JhZGllbnQoMTUwLDc1LDUwLDE1MCw3NSw0OSlcblxuXHRcdCMgXHRncmQgPSBjb250ZXh0LmNyZWF0ZVJhZGlhbEdyYWRpZW50KCByYW5kb21WYWwxLCByYW5kb21WYWwyLCAwLjAwMCwgcmFuZG9tVmFsMywgcmFuZG9tVmFsNCwgcmFuZG9tVmFsNSlcblxuXHRcdCMgXHQjIEFkZCBjb2xvcnNcblx0XHQjIFx0Z3JkLmFkZENvbG9yU3RvcCAwLjAwMCwgXCJyZ2JhKDE0LCAxNCwgMTYsIDEuMDAwKVwiXG5cdFx0IyBcdGdyZC5hZGRDb2xvclN0b3AgMC4xNzAsIFwicmdiYSgxNCwgMTQsIDE2LCAxLjAwMClcIlxuXHRcdCMgXHRncmQuYWRkQ29sb3JTdG9wIDAuMjcwLCBcInJnYmEoOTYsIDEwOSwgOTEsIDEuMDAwKVwiXG5cdFx0IyBcdGdyZC5hZGRDb2xvclN0b3AgMC42MTAsIFwicmdiYSg3NSwgOTMsIDEwMywgMS4wMDApXCJcblx0XHQjIFx0Z3JkLmFkZENvbG9yU3RvcCAwLjYyMCwgXCJyZ2JhKDc1LCA5MywgMTAzLCAxLjAwMClcIlxuXHRcdCMgXHRncmQuYWRkQ29sb3JTdG9wIDAuNjkwLCBcInJnYmEoMjU1LCAyNTAsIDI1MCwgMS4wMDApXCJcblx0XHQjIFx0Z3JkLmFkZENvbG9yU3RvcCAwLjkyMCwgXCJyZ2JhKDI1NSwgMjUwLCAyNTAsIDEuMDAwKVwiXG5cdFx0IyBcdGdyZC5hZGRDb2xvclN0b3AgMC45MzAsIFwicmdiYSgwLCAwLCAwLCAxLjAwMClcIlxuXHRcdCMgXHRncmQuYWRkQ29sb3JTdG9wIDAuOTQwLCBcInJnYmEoMjU1LCAyNTUsIDI1NSwgMS4wMDApXCJcblxuXHRcdCMgXHQjIEZpbGwgd2l0aCBncmFkaWVudFxuXHRcdCMgXHRjb250ZXh0LmZpbGxTdHlsZSA9IGdyZFxuXHRcdCMgXHRjb250ZXh0LmZpbGxSZWN0IDAsIDAsIGNvbnRleHQuY2FudmFzLndpZHRoLCBjb250ZXh0LmNhbnZhcy5oZWlnaHRcblxuXHRcdCMgXHQjIHNhdmUgb3B0aW9ucyB0byBjdXJyZW50IG1vZGVsXG5cdFx0IyBcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDEgPSByYW5kb21WYWwxXG5cdFx0IyBcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDIgPSByYW5kb21WYWwyXG5cdFx0IyBcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDMgPSByYW5kb21WYWwzXG5cdFx0IyBcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDQgPSByYW5kb21WYWw0XG5cdFx0IyBcdEdyYWRpZW50R2VuLm9wdGlvbnMuZGVmaW5lZFZhbDUgPSByYW5kb21WYWw1XG5cblx0XVxuXG5cdEBkcmF3ID0gKGNhbnZhcyxtb2RlbCxhcmdzLi4uKSAtPlxuXHRcdGluaXRDb2xvclNjaGVtZSA9IC0+XG5cdFx0XHRzY20gPSBuZXcgQ29sb3JTY2hlbWUoKVxuXHRcdFx0aHVlID0gYXBwLmdldFJhbmRvbSgwLjIsIDM1OSwgMSlcblxuXHRcdFx0dmFyaWF0aW9ucyA9IFsnZGVmYXVsdCcsICdwYXN0ZWwnLCAnc29mdCcsICdsaWdodCcsICdoYXJkJywgJ3BhbGUnIF1cblx0XHRcdHZhcmlhdGlvbiA9IHZhcmlhdGlvbnNbIGFwcC5nZXRSYW5kb20oMCwgdmFyaWF0aW9ucy5sZW5ndGgtMSkgXVxuXHRcdFx0c2NtLmZyb21faHVlKGh1ZSlcblx0XHRcdC5zY2hlbWUoJ3RldHJhZGUnKVxuXHRcdFx0LmRpc3RhbmNlKDAuMSlcblx0XHRcdC5hZGRfY29tcGxlbWVudChmYWxzZSlcblx0XHRcdC52YXJpYXRpb24odmFyaWF0aW9uKVxuXHRcdFx0LndlYl9zYWZlKGZhbHNlKVxuXHRcdFx0c2NtLmNvbG9ycygpXG5cblx0XHRjb250ZXh0ID0gY2FudmFzLmdldENvbnRleHQoXCIyZFwiKVxuXHRcdCQuZXh0ZW5kKCBHcmFkaWVudEdlbi5vcHRpb25zLCBtb2RlbC5nZXQgJ2dlbmVyYXRvcnMuZ3JhZGllbnRHZW4nIClcblx0XHRpZiBtb2RlbC5nZXQgJ2dlbmVyYXRvcnMuZ3JhZGllbnRHZW4uaXNEZWZhdWx0J1xuXG5cdFx0XHRyYW5kb21WYXJpYW50ID0gYXBwLmdldFJhbmRvbSgwLCBAZ3JhZGllbnRWYXJpYW50cy5sZW5ndGgtMSlcblxuXHRcdFx0R3JhZGllbnRHZW4ub3B0aW9ucy5jb2xvclNjaGVtZSA9IGluaXRDb2xvclNjaGVtZSgpXG5cblx0XHRcdEBncmFkaWVudFZhcmlhbnRzWyByYW5kb21WYXJpYW50IF0oY29udGV4dClcblx0XHRcdEdyYWRpZW50R2VuLm9wdGlvbnMuZ3JhZGllbnRWYXJpYW50TnVtID0gcmFuZG9tVmFyaWFudFxuXG5cdFx0XHRHcmFkaWVudEdlbi5vcHRpb25zLmlzRGVmYXVsdCA9IGZhbHNlXG5cdFx0XHRcblx0XHRcdG1vZGVsLnNldCAnZ2VuZXJhdG9ycy5ncmFkaWVudEdlbicsIEdyYWRpZW50R2VuLm9wdGlvbnMsXG5cdFx0XHRcdHNpbGVudDogdHJ1ZVxuXG5cdFx0ZWxzZSBpZiAhbW9kZWwuZ2V0ICdnZW5lcmF0b3JzLmdyYWRpZW50R2VuLmlzRGVmYXVsdCdcblxuXHRcdFx0ZGVmaW5lZFZhcmlhbnQgPSBtb2RlbC5nZXQgJ2dlbmVyYXRvcnMuZ3JhZGllbnRHZW4uZ3JhZGllbnRWYXJpYW50TnVtJ1xuXHRcdFx0QGdyYWRpZW50VmFyaWFudHNbIGRlZmluZWRWYXJpYW50IF0oY29udGV4dClcblxuXG5cbiJdfQ==