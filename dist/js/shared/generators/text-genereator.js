(function() {
  var __slice = [].slice;

  this.app.module('shared.generators.textGen', function(TextGen, app, Backbone, Marionette, $, _) {
    var fontsList, generateRandomData, generateRandomTextOptions, prepareData, prepareInitials, renderText, srcData;
    srcData = dataFromServer.appData;
    srcData.textAligns = ['left', 'center', 'right'];
    fontsList = srcData.fontsList;
    generateRandomData = function() {
      var randomCardData, randomNameNum, randomPhoneEnd;
      randomNameNum = app.getRandom(0, srcData.names.length - 1);
      randomPhoneEnd = app.getRandom(0, srcData.names.length - 1);
      if (('' + randomPhoneEnd).length < 2) {
        randomPhoneEnd = '0' + randomPhoneEnd;
      }
      randomCardData = {
        isDefault: false,
        sex: srcData.names[randomNameNum].sex,
        name: srcData.names[randomNameNum].text,
        surname: srcData.surnames[app.getRandom(0, srcData.surnames.length - 1)],
        eMail: srcData.emails[app.getRandom(0, srcData.emails.length - 1)],
        position: srcData.positions[app.getRandom(0, srcData.positions.length - 1)],
        phone: '+7-' + srcData.phones + randomPhoneEnd
      };
      return randomCardData;
    };
    generateRandomTextOptions = function() {
      var randomTextOptions;
      randomTextOptions = {
        isDefault: false,
        textAlign: srcData.textAligns[app.getRandom(0, srcData.textAligns.length - 1)],
        fontFamily: 'sans-serif',
        textBlockOptions: {
          padding: {
            top: app.getRandom(10, 50, 2),
            left: app.getRandom(10, 50, 2),
            bottom: 0,
            right: app.getRandom(10, 50, 2)
          },
          title: {
            fontSize: "" + (app.getRandom(1, 2.5, 2)) + "em",
            color: "rgb(" + (app.getRandom(0, 120)) + "," + (app.getRandom(0, 120)) + "," + (app.getRandom(0, 120)) + ")",
            textBaseline: 'middle',
            lineHeight: app.getRandom(18, 40, 2),
            marginBottom: 0
          },
          body: {
            fontSize: "" + (app.getRandom(0.5, 1.5, 2)) + "em",
            color: "rgb(" + (app.getRandom(0, 160)) + "," + (app.getRandom(0, 160)) + "," + (app.getRandom(0, 160)) + ")",
            textBaseline: 'middle',
            lineHeight: app.getRandom(10, 30, 2)
          }
        }
      };
      return randomTextOptions;
    };
    prepareInitials = function(sex, name, surname) {
      if (sex === 'male') {
        surname = surname;
      } else if (sex === 'female') {
        if (surname.substr(surname.length - 2, surname.length) === 'ий') {
          surname = surname.slice(0, surname.length - 2);
          surname = surname + 'ая';
        } else {
          surname = surname + 'a';
        }
      }
      return name + ' ' + surname;
    };
    prepareData = function(model) {
      var randomData, randomTextOptions;
      if (model.get('data').isDefault) {
        randomData = generateRandomData();
        model.set('data', randomData, {
          silent: true
        });
      }
      if (model.get('generators.textGen').isDefault) {
        randomTextOptions = generateRandomTextOptions();
        model.set('generators.textGen', randomTextOptions, {
          silent: true
        });
      }
      return model.attributes;
    };
    renderText = function(svg, model) {
      var body, data, heading;
      data = model.get('data');
      heading = svg.text(function() {
        this.tspan(prepareInitials(data.sex, data.name, data.surname)).fill('#232').newLine().dx(20);
        return this.font({
          size: 30
        });
      });
      body = svg.text("E-mail: " + data.eMail + " \nТелефон: " + data.phone + " \nДолжность: " + data.position).leading(0.5).attr({
        width: 10
      }).move(20, 60).font({
        size: 20
      });
      if (!window.svgBody) {
        return window.svgBody = body;
      }
    };
    return this.draw = function() {
      var args, model, svg;
      svg = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      prepareData.call(this, model);
      return renderText.call(this, svg, model, args);
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,