(function() {
  var __slice = [].slice;

  this.app.module('shared.generators.textGen', function(TextGen, app, Backbone, Marionette, $, _) {
    var fontsList, generateRandomData, generateRandomTextOptions, prepareData, prepareInitials, renderText, srcData;
    srcData = dataFromServer.appData;
    srcData.textAligns = ['left', 'center', 'right'];
    fontsList = srcData.fontsList;
    generateRandomData = function() {
      var randomCardData, randomNameNum, randomPhoneEnd;
      randomNameNum = app.getRandom(0, srcData.names.length - 1);
      randomPhoneEnd = app.getRandom(0, srcData.names.length - 1);
      if (('' + randomPhoneEnd).length < 2) {
        randomPhoneEnd = '0' + randomPhoneEnd;
      }
      randomCardData = {
        isDefault: false,
        sex: srcData.names[randomNameNum].sex,
        name: srcData.names[randomNameNum].text,
        surname: srcData.surnames[app.getRandom(0, srcData.surnames.length - 1)],
        eMail: srcData.emails[app.getRandom(0, srcData.emails.length - 1)],
        position: srcData.positions[app.getRandom(0, srcData.positions.length - 1)],
        phone: '+7-' + srcData.phones + randomPhoneEnd
      };
      return randomCardData;
    };
    generateRandomTextOptions = function() {
      var randomTextOptions;
      randomTextOptions = {
        isDefault: false,
        textAlign: srcData.textAligns[app.getRandom(0, srcData.textAligns.length - 1)],
        fontFamily: 'sans-serif',
        textBlockOptions: {
          padding: {
            top: app.getRandom(10, 50, 2),
            left: app.getRandom(10, 50, 2),
            bottom: 0,
            right: app.getRandom(10, 50, 2)
          },
          title: {
            fontSize: "" + (app.getRandom(1, 2.5, 2)) + "em",
            color: "rgb(" + (app.getRandom(0, 120)) + "," + (app.getRandom(0, 120)) + "," + (app.getRandom(0, 120)) + ")",
            textBaseline: 'middle',
            lineHeight: app.getRandom(18, 40, 2),
            marginBottom: 0
          },
          body: {
            fontSize: "" + (app.getRandom(0.5, 1.5, 2)) + "em",
            color: "rgb(" + (app.getRandom(0, 160)) + "," + (app.getRandom(0, 160)) + "," + (app.getRandom(0, 160)) + ")",
            textBaseline: 'middle',
            lineHeight: app.getRandom(10, 30, 2)
          }
        }
      };
      return randomTextOptions;
    };
    prepareInitials = function(sex, name, surname) {
      if (sex === 'male') {
        surname = surname;
      } else if (sex === 'female') {
        if (surname.substr(surname.length - 2, surname.length) === 'ий') {
          surname = surname.slice(0, surname.length - 2);
          surname = surname + 'ая';
        } else {
          surname = surname + 'a';
        }
      }
      return name + ' ' + surname;
    };
    prepareData = function(model) {
      var randomData, randomTextOptions;
      if (model.get('data').isDefault) {
        randomData = generateRandomData();
        model.set('data', randomData, {
          silent: true
        });
      }
      if (model.get('generators.textGen').isDefault) {
        randomTextOptions = generateRandomTextOptions();
        model.set('generators.textGen', randomTextOptions, {
          silent: true
        });
      }
      return model.attributes;
    };
    renderText = function(svg, model) {
      var buildHeadingText, buildInfoText, data, flowText, heading, headingProperties, info, infoProperties, maxWidth, top;
      data = model.get('data');
      String.prototype.insert = function(index, string) {
        if (index > 0) {
          return this.substring(0, index) + string + this.substring(index, this.length);
        } else {
          return string + this;
        }
      };
      flowText = function(string, maxWidth, font) {
        var measureText, paragraphBuffer, stringBuffer, testString, testWidth, word, words, _i, _len;
        paragraphBuffer = '';
        stringBuffer = '';
        words = string.split(' ');
        measureText = function(string) {
          var testText, width;
          testText = svg.text(string).font(font);
          width = testText.bbox().width;
          testText.remove();
          return width;
        };
        for (_i = 0, _len = words.length; _i < _len; _i++) {
          word = words[_i];
          testString = paragraphBuffer.length < 1 ? "" + word : "" + paragraphBuffer + " " + word;
          testWidth = measureText(testString);
          if (testWidth > maxWidth) {
            console.log('enter apended', word);
            console.log(testWidth, maxWidth);
            paragraphBuffer = "" + paragraphBuffer + "\n" + word;
          } else {
            paragraphBuffer = testString;
          }
        }
        return paragraphBuffer;
      };
      maxWidth = $(svg.node).width() + 100;
      headingProperties = {
        paddingTop: 20,
        paddingBottom: 0,
        paddingLeft: 0,
        paddingRight: 0,
        marginTop: 0,
        lineHeight: 1,
        font: {
          size: 30
        }
      };
      infoProperties = {
        paddingTop: 0,
        paddingBottom: 0,
        paddingLeft: 0,
        paddingRight: 0,
        marginTop: 0,
        lineHeight: 1,
        font: {
          size: 20
        }
      };
      buildHeadingText = function() {
        var template, text;
        data.sex = data.sex;
        data.name = data.name;
        data.surname = data.surname;
        template = prepareInitials(data.sex, data.name, data.surname);
        text = flowText(template, maxWidth, headingProperties.font);
        return text;
      };
      buildInfoText = function() {
        var paragraph, paragraphs, template, textBlockBuffer, _i, _len;
        data.eMail = data.eMail;
        data.phone = data.phone;
        data.position = data.position;
        template = "E-mail: " + data.eMail + " \nТелефон: " + data.phone + " \nДолжность: " + data.position;
        paragraphs = template.split('\n');
        textBlockBuffer = [];
        for (_i = 0, _len = paragraphs.length; _i < _len; _i++) {
          paragraph = paragraphs[_i];
          paragraph = paragraph.trim();
          paragraph = flowText(paragraph, maxWidth, infoProperties.font);
          textBlockBuffer.push(paragraph);
        }
        paragraphs = textBlockBuffer.join('\n');
        return paragraphs;
      };
      heading = svg.text(buildHeadingText()).leading(headingProperties.lineHeight).fill('#232').move(headingProperties.paddingRight, headingProperties.paddingTop).font(headingProperties.font);
      top = $(heading.node).height();
      return info = svg.text(buildInfoText()).leading(infoProperties.lineHeight).fill('#232').move(infoProperties.paddingRight, infoProperties.paddingTop + headingProperties.paddingTop + top + infoProperties.marginTop).font(infoProperties.font);
    };
    return this.draw = function() {
      var args, model, svg;
      svg = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      prepareData.call(this, model);
      return renderText.call(this, svg, model, args);
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,