(function() {
  var __slice = [].slice;

  this.app.module('shared.generators.gradientGen', function(GradientGen) {
    var generateRandomData, gradientVariants, initColorScheme, options, prepareData;
    gradientVariants = [
      function(svg, options) {
        var prepareOptions, readyOptions;
        prepareOptions = function() {
          var preparedOptions;
          preparedOptions = options.variantConfig.isDefault ? {
            val1: app.getRandom(0, options.colorScheme.length - 1)
          } : options.variantConfig;
          return preparedOptions;
        };
        readyOptions = prepareOptions();
        svg.rect(svg.width(), svg.height()).move(0, 0).attr({
          fill: "#" + options.colorScheme[readyOptions.val1]
        });
        return readyOptions;
      }, function(svg, options) {
        var prepareOptions, readyOptions;
        prepareOptions = function() {
          var preparedOptions;
          preparedOptions = options.variantConfig.isDefault ? {
            val1: app.getRandom(0, options.colorScheme.length - 1)
          } : options.variantConfig;
          return preparedOptions;
        };
        readyOptions = prepareOptions();
        svg.rect(svg.width(), svg.height()).move(0, 0).attr({
          fill: "#" + options.colorScheme[readyOptions.val1]
        });
        return readyOptions;
      }, function(svg, options) {
        var prepareOptions, readyOptions, svgHeight, svgWidth;
        prepareOptions = function() {
          var preparedOptions;
          preparedOptions = options.variantConfig.isDefault ? {
            val1: app.getRandom(0, options.colorScheme.length - 1)
          } : options.variantConfig;
          return preparedOptions;
        };
        readyOptions = prepareOptions();
        svgWidth = $(svg.parent).width();
        svgHeight = $(svg.parent).height();
        svg.rect('50%', '100%').move(0, 0).fill("#" + options.colorScheme[readyOptions.val1]);
        return readyOptions;
      }
    ];
    options = {};
    initColorScheme = function() {
      var hue, scm, variation, variations;
      scm = new ColorScheme();
      hue = app.getRandom(0.2, 359, 1);
      variations = ['default', 'pastel', 'soft', 'light', 'hard', 'pale'];
      variation = variations[app.getRandom(0, variations.length - 1)];
      scm.from_hue(hue).scheme('tetrade').distance(0.1).add_complement(false).variation(variation).web_safe(false);
      return scm.colors();
    };
    generateRandomData = (function(_this) {
      return function(model) {
        options.isDefault = false;
        options.colorScheme = initColorScheme();
        options.gradientVariantNum = app.getRandom(0, gradientVariants.length - 1);
        return options;
      };
    })(this);
    prepareData = function(model) {
      var randomData, variandConfig;
      variandConfig = model.get('generators.gradientGen.variantConfig');
      if (model.get('generators.gradientGen.isDefault')) {
        randomData = generateRandomData(model);
      }
      return model.set('generators.gradientGen', randomData, {
        silent: true
      });
    };
    return this.draw = function() {
      var args, model, svg, variantNum;
      svg = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      prepareData.call(this, model);
      _.extend(options, model.get('generators.gradientGen'));
      variantNum = app.getRandom(0, 2);
      return gradientVariants[variantNum].call(this, svg, options);
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,