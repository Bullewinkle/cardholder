(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.gradientGen', function(GradientGen) {
    GradientGen.options = {};
    this.gradientVariants = [
      function() {
        var args, context, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!GradientGen.options.isDefault) {
          randomVal1 = GradientGen.options.definedVal1;
        } else if (GradientGen.options.isDefault) {
          randomVal1 = app.getRandom(0, GradientGen.options.colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + GradientGen.options.colorScheme[randomVal1];
        context.fillRect(0, 0, context.canvas.width / 2, context.canvas.height);
        return GradientGen.options = {
          definedVal1: randomVal1
        };
      }
    ];
    return this.draw = function() {
      var args, canvas, context, definedVariant, initColorScheme, model, randomVariant;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      initColorScheme = function() {
        var hue, scm, variation, variations;
        scm = new ColorScheme();
        hue = app.getRandom(0.2, 359, 1);
        variations = ['default', 'pastel', 'soft', 'light', 'hard', 'pale'];
        variation = variations[app.getRandom(0, variations.length - 1)];
        scm.from_hue(hue).scheme('tetrade').distance(0.1).add_complement(false).variation(variation).web_safe(false);
        return scm.colors();
      };
      context = canvas.getContext("2d");
      $.extend(GradientGen.options, model.get('generators.gradientGen'));
      if (model.get('generators.gradientGen.isDefault')) {
        GradientGen.options.colorScheme = initColorScheme();
        randomVariant = app.getRandom(0, this.gradientVariants.length - 1);
        this.gradientVariants[randomVariant](context);
        GradientGen.options.gradientVariantNum = randomVariant;
        GradientGen.options.isDefault = false;
        model.set('generators.gradientGen', GradientGen.options, {
          silent: true
        });
        console.log('default:', model.get('generators.gradientGen.colorScheme'));
        return console.log(GradientGen.options.colorScheme);
      } else if (!model.get('generators.gradientGen.isDefault')) {
        console.log('!default', model.get('generators.gradientGen.colorScheme'));
        console.log(GradientGen.options.colorScheme);
        definedVariant = model.get('generators.gradientGen.gradientVariantNum');
        return this.gradientVariants[definedVariant](context);
      }
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,