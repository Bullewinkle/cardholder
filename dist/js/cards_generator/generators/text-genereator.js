(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.textGen', function(TextGen, app, Backbone, Marionette, $, _) {
    this.draw = function() {
      var args, canvas, cardData, context, eMail, fontFamily, fontsList, model, name, phone, position, randomCardData, randomNameNum, randomPhoneEnd, randomTextOptions, renderText, sex, srcData, surname, textAlign, textOptions;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      srcData = app.CardGenerator.data.get('appData');
      srcData.textAligns = ['left', 'center', 'right'];
      fontsList = srcData.fontsList;
      textOptions = model.get('generators.textGen');
      cardData = model.get('data');
      name = cardData.name;
      surname = cardData.surname;
      sex = cardData.sex;
      phone = cardData.phone;
      eMail = cardData.eMail;
      position = cardData.position;
      textAlign = textOptions.textAlign;
      fontFamily = textOptions.fontFamily;
      context = canvas.getContext('2d');
      renderText = (function(_this) {
        return function(fontFamily) {
          var font, paragrafHeight, wrapText, x, y;
          if (fontFamily === 'sans-serif') {
            font = fontFamily;
          } else {
            font = '"' + fontFamily + '"';
          }
          switch (textAlign) {
            case 'left':
              x = 10;
              y = 20;
              break;
            case 'center':
              x = canvas.width / 2;
              y = 20;
              break;
            case 'right':
              x = canvas.width - 10;
              y = 20;
          }
          paragrafHeight = 0;
          wrapText = function(context, text, x, y, maxWidth, lineHeight) {
            var line, linesCounter, metrics, testLine, testWidth, word, words, _i, _len;
            words = text.split(' ');
            line = '';
            linesCounter = 0;
            for (_i = 0, _len = words.length; _i < _len; _i++) {
              word = words[_i];
              linesCounter = _i + 1;
              testLine = line + word + ' ';
              metrics = context.measureText(testLine);
              testWidth = metrics.width;
              if (testWidth > maxWidth && _i > 0) {
                context.fillText(line, x, y);
                line = word + ' ';
                y += lineHeight;
              } else {
                line = testLine;
              }
              paragrafHeight = y;
            }
            return context.fillText(line, x, y);
          };
          context.font = '1.5em ' + font;
          context.textAlign = textAlign;
          context.fillStyle = '#000';
          context.textBaseline = 'middle';
          context.lineWidth = 1.5;
          wrapText(context, _this.renderInitials(sex, name, surname), x, y, canvas.width - 20, 28);
          context.font = '0.8em ' + font;
          if (textAlign === 'right') {
            x -= 5;
          }
          context.fillText('тел.: ' + phone, x, 32 + paragrafHeight);
          context.fillText('email: ' + eMail, x, 49 + paragrafHeight);
          if (textAlign === 'right') {
            x += 5;
          }
          wrapText(context, position, x, 66 + paragrafHeight, canvas.width - 20, 18);
          return context.save();
        };
      })(this);
      if (cardData.isDefault || textOptions.isDefault) {
        randomCardData = {
          isDefault: false
        };
        randomNameNum = app.getRandom(0, srcData.names.length - 1);
        randomPhoneEnd = app.getRandom(0, srcData.names.length - 1);
        if (('' + randomPhoneEnd).length < 2) {
          randomPhoneEnd = '0' + randomPhoneEnd;
        }
        randomCardData.sex = srcData.names[randomNameNum].sex;
        randomCardData.name = srcData.names[randomNameNum].text;
        randomCardData.surname = srcData.surnames[app.getRandom(0, srcData.surnames.length - 1)];
        randomCardData.eMail = srcData.emails[app.getRandom(0, srcData.emails.length - 1)];
        randomCardData.position = srcData.positions[app.getRandom(0, srcData.positions.length - 1)];
        randomCardData.phone = '+7-' + srcData.phones + randomPhoneEnd;
        model.set('data', randomCardData, {
          silent: true
        });
        randomTextOptions = {
          isDefault: false
        };
        randomTextOptions.textAlign = srcData.textAligns[app.getRandom(0, srcData.textAligns.length - 1)];
        randomTextOptions.fontFamily = '' + fontsList[app.getRandom(0, fontsList.length - 1)];
        WebFont.load({
          custom: {
            families: [randomTextOptions.fontFamily],
            urls: ['/assets/font/card_fonts/' + randomTextOptions.fontFamily + '/' + randomTextOptions.fontFamily + '.css']
          },
          fontloading: (function(_this) {
            return function() {};
          })(this),
          fontactive: (function(_this) {
            return function(fontFamily, fontOptions) {
              return _this.draw(canvas, model);
            };
          })(this),
          fontinactive: (function(_this) {
            return function() {
              return _this.draw(canvas, model);
            };
          })(this)
        });
        return model.set('generators.textGen', randomTextOptions, {
          silent: true
        });
      } else {
        return renderText(fontFamily);
      }
    };
    return this.renderInitials = function(sex, name, surname) {
      if (sex === 'male') {
        surname = surname;
      } else if (sex === 'female') {
        if (surname.substr(surname.length - 2, surname.length) === 'ий') {
          surname = surname.slice(0, surname.length - 2);
          surname = surname + 'ая';
        } else {
          surname = surname + 'a';
        }
      }
      return name + ' ' + surname;
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,