(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.textGen', function(TextGen) {
    this.options = {};
    return this.draw = function() {
      var args, canvas, cardData, context, eMail, fontFamily, fontsList, model, name, newData, options, phone, position, randomFont, randomFontNumber, randomNameNum, randomPhoneEnd, renderInitials, renderText, sex, srcData, surname, textAlign, textAligns;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      options = model.get('generators.' + this.name);
      cardData = model.get('data');
      srcData = app.data.attributes;
      name = model.get('data.name');
      surname = model.get('data.surname');
      sex = model.get('data.sex');
      phone = model.get('data.phone');
      eMail = model.get('data.eMail');
      position = model.get('data.position');
      textAligns = ['left', 'center', 'right'];
      textAlign = options.textAlign;
      fontsList = app.data.get('fontsList');
      fontFamily = options.fontFamily;
      context = canvas.getContext('2d');
      renderText = function(fontFamily) {
        var font, paragrafHeight, wrapText, x, y;
        if (fontFamily === 'sans-serif') {
          font = fontFamily;
        } else {
          font = '"' + fontFamily + '"';
        }
        switch (textAlign) {
          case 'left':
            x = 10;
            y = 20;
            break;
          case 'center':
            x = canvas.width / 2;
            y = 20;
            break;
          case 'right':
            x = canvas.width - 10;
            y = 20;
        }
        paragrafHeight = 0;
        wrapText = function(context, text, x, y, maxWidth, lineHeight) {
          var line, linesCounter, metrics, testLine, testWidth, word, words, _i, _len;
          words = text.split(' ');
          line = '';
          linesCounter = 0;
          for (_i = 0, _len = words.length; _i < _len; _i++) {
            word = words[_i];
            linesCounter = _i + 1;
            testLine = line + word + ' ';
            metrics = context.measureText(testLine);
            testWidth = metrics.width;
            if (testWidth > maxWidth && _i > 0) {
              context.fillText(line, x, y);
              line = word + ' ';
              y += lineHeight;
            } else {
              line = testLine;
            }
            paragrafHeight = y;
          }
          return context.fillText(line, x, y);
        };
        context.font = '1.5em ' + font;
        context.textAlign = textAlign;
        context.fillStyle = '#000';
        context.textBaseline = 'middle';
        context.lineWidth = 1.5;
        wrapText(context, renderInitials(name, surname), x, y, canvas.width - 20, 28);
        context.font = '0.8em ' + font;
        if (textAlign === 'right') {
          x -= 5;
        }
        context.fillText('тел.: ' + phone, x, 32 + paragrafHeight);
        context.fillText('email: ' + eMail, x, 49 + paragrafHeight);
        if (textAlign === 'right') {
          x += 5;
        }
        wrapText(context, position, x, 66 + paragrafHeight, canvas.width - 20, 18);
        return context.save();
      };
      renderInitials = function(name, surname) {
        if (sex === 'male') {
          surname = surname;
        } else if (sex === 'female') {
          if (surname.substr(surname.length - 2, surname.length) === 'ий') {
            surname = surname.slice(0, surname.length - 2);
            surname = surname + 'ая';
          } else {
            surname = surname + 'a';
          }
        }
        return name + ' ' + surname;
      };
      if (cardData.defaultData) {
        newData = {};
        randomNameNum = app.getRandom(0, srcData.names.length - 1);
        name = srcData.names[randomNameNum].text;
        newData.name = name;
        sex = srcData.names[randomNameNum].sex;
        newData.sex = sex;
        surname = srcData.surnames[app.getRandom(0, srcData.surnames.length - 1)];
        newData.surname = surname;
        randomPhoneEnd = app.getRandom(0, srcData.names.length - 1);
        if (('' + randomPhoneEnd).length < 2) {
          randomPhoneEnd = '0' + randomPhoneEnd;
        }
        phone = '+7-' + srcData.phones + randomPhoneEnd;
        newData.phone = phone;
        eMail = srcData.emails[app.getRandom(0, srcData.emails.length - 1)];
        newData.eMail = eMail;
        position = srcData.positions[app.getRandom(0, srcData.positions.length - 1)];
        newData.position = position;
        newData.defaultData = false;
        model.set('data', newData, {
          silent: true
        });
      }
      if (options.defaultOptions) {
        textAlign = textAligns[app.getRandom(0, textAligns.length - 1)];
        model.set('generators.' + this.name + '.textAlign', textAlign, {
          silent: true
        });
        randomFontNumber = app.getRandom(0, app.data.get('fontsList'.length - 1));
        randomFont = app.data.get('fontsList');
        fontFamily = '' + randomFont[randomFontNumber];
        WebFont.load({
          custom: {
            families: [fontFamily],
            urls: ['/assets/font/card_fonts/' + fontFamily + '/' + fontFamily + '.css']
          },
          active: (function(_this) {
            return function() {
              renderText(fontFamily);
              return model.set('generators.' + _this.name + '.fontFamily', fontFamily, {
                silent: true
              });
            };
          })(this),
          loading: (function(_this) {
            return function() {};
          })(this),
          fontloading: (function(_this) {
            return function() {};
          })(this),
          fontactive: (function(_this) {
            return function() {};
          })(this),
          inactive: (function(_this) {
            return function() {
              renderText(model.defaults.generators[_this.name].fontFamily);
              return console.log('INACTIVE FONT : ' + fontFamily);
            };
          })(this),
          fontinactive: (function(_this) {
            return function() {};
          })(this)
        });
      } else {
        renderText(fontFamily);
      }
      return model.set('generators.' + this.name + '.defaultOptions', false, {
        silent: true
      });
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,