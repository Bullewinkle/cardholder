(function() {
  var __slice = [].slice;

  this.app.module('CardGenerator.generators.starsGen', function(StarsGen) {
    this.options = {};
    this.variants = [
      function() {
        var args, context;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        context.fillStyle = '#fff';
        return context.fillRect(0, 0, context.canvas.width, context.canvas.height);
      }, function() {
        var args, context, randomVal1;
        context = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        if (!gen.options.isDefault) {
          randomVal1 = gen.options.definedVal1;
        } else if (gen.options.isDefault) {
          randomVal1 = app.getRandom(0, gen.options.colorScheme.length - 1);
        }
        context.fillStyle = '#fff';
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        context.fillStyle = '#' + gen.options.colorScheme[randomVal1];
        context.fillRect(0, 0, context.canvas.width, context.canvas.height);
        return gen.options = {
          definedVal1: randomVal1
        };
      }
    ];
    return this.draw = function() {
      var args, canvas, context, model, predefinedVariant, randomVariant;
      canvas = arguments[0], model = arguments[1], args = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
      alert('hi');
      context = canvas.getContext("2d");
      $.extend(this.options, model.get('generators.' + this.name));
      if (model.get('generators.' + this.name + '.isDefault')) {
        randomVariant = app.getRandom(0, this.gradientVariants.length - 1);
        this.gradientVariants[randomVariant](context);
        this.options.gradientVariantNum = randomVariant;
        this.options.isDefault = false;
      } else if (!model.get('generators.' + this.name + '.isDefault')) {
        this.isDefault = false;
        predefinedVariant = model.get('generators.' + this.name + '.gradientVariantNum');
        this.gradientVariants[predefinedVariant](context);
      }
      return model.set('generators.' + this.name, this.options, {
        silent: true
      });
    };
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmRzX2dlbmVyYXRvci9nZW5lcmF0b3JzL3ByZXYtbWV0aG9kLmNvZmZlZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUFBLE1BQUEsa0JBQUE7O0FBQUEsRUFBQSxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQUwsQ0FBWSxtQ0FBWixFQUFpRCxTQUFDLFFBQUQsR0FBQTtBQUVoRCxJQUFBLElBQUMsQ0FBQSxPQUFELEdBQVcsRUFBWCxDQUFBO0FBQUEsSUFFQSxJQUFDLENBQUEsUUFBRCxHQUFZO01BRVgsU0FBQSxHQUFBO0FBRUMsWUFBQSxhQUFBO0FBQUEsUUFGQSx3QkFBUSw4REFFUixDQUFBO0FBQUEsUUFBQSxPQUFPLENBQUMsU0FBUixHQUFvQixNQUFwQixDQUFBO2VBQ0EsT0FBTyxDQUFDLFFBQVIsQ0FBaUIsQ0FBakIsRUFBbUIsQ0FBbkIsRUFBcUIsT0FBTyxDQUFDLE1BQU0sQ0FBQyxLQUFwQyxFQUEwQyxPQUFPLENBQUMsTUFBTSxDQUFDLE1BQXpELEVBSEQ7TUFBQSxDQUZXLEVBUVgsU0FBQSxHQUFBO0FBRUMsWUFBQSx5QkFBQTtBQUFBLFFBRkEsd0JBQVEsOERBRVIsQ0FBQTtBQUFBLFFBQUEsSUFBRyxDQUFBLEdBQUksQ0FBQyxPQUFPLENBQUMsU0FBaEI7QUFDQyxVQUFBLFVBQUEsR0FBYSxHQUFHLENBQUMsT0FBTyxDQUFDLFdBQXpCLENBREQ7U0FBQSxNQUVLLElBQUcsR0FBRyxDQUFDLE9BQU8sQ0FBQyxTQUFmO0FBQ0osVUFBQSxVQUFBLEdBQWEsR0FBRyxDQUFDLFNBQUosQ0FBYyxDQUFkLEVBQWdCLEdBQUcsQ0FBQyxPQUFPLENBQUMsV0FBVyxDQUFDLE1BQXhCLEdBQStCLENBQS9DLENBQWIsQ0FESTtTQUZMO0FBQUEsUUFLQSxPQUFPLENBQUMsU0FBUixHQUFvQixNQUxwQixDQUFBO0FBQUEsUUFNQSxPQUFPLENBQUMsUUFBUixDQUFpQixDQUFqQixFQUFtQixDQUFuQixFQUFxQixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQXBDLEVBQTBDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBekQsQ0FOQSxDQUFBO0FBQUEsUUFPQSxPQUFPLENBQUMsU0FBUixHQUFvQixHQUFBLEdBQUksR0FBRyxDQUFDLE9BQU8sQ0FBQyxXQUFZLENBQUEsVUFBQSxDQVBoRCxDQUFBO0FBQUEsUUFRQSxPQUFPLENBQUMsUUFBUixDQUFpQixDQUFqQixFQUFtQixDQUFuQixFQUFxQixPQUFPLENBQUMsTUFBTSxDQUFDLEtBQXBDLEVBQTBDLE9BQU8sQ0FBQyxNQUFNLENBQUMsTUFBekQsQ0FSQSxDQUFBO2VBV0EsR0FBRyxDQUFDLE9BQUosR0FDQztBQUFBLFVBQUEsV0FBQSxFQUFhLFVBQWI7VUFkRjtNQUFBLENBUlc7S0FGWixDQUFBO1dBMkJBLElBQUMsQ0FBQSxJQUFELEdBQVEsU0FBQSxHQUFBO0FBQ1AsVUFBQSw4REFBQTtBQUFBLE1BRFEsdUJBQU8sc0JBQU0sOERBQ3JCLENBQUE7QUFBQSxNQUFBLEtBQUEsQ0FBTSxJQUFOLENBQUEsQ0FBQTtBQUFBLE1BQ0EsT0FBQSxHQUFVLE1BQU0sQ0FBQyxVQUFQLENBQWtCLElBQWxCLENBRFYsQ0FBQTtBQUFBLE1BR0EsQ0FBQyxDQUFDLE1BQUYsQ0FBVSxJQUFDLENBQUEsT0FBWCxFQUFtQixLQUFLLENBQUMsR0FBTixDQUFVLGFBQUEsR0FBZSxJQUFDLENBQUEsSUFBMUIsQ0FBbkIsQ0FIQSxDQUFBO0FBSUEsTUFBQSxJQUFHLEtBQUssQ0FBQyxHQUFOLENBQVUsYUFBQSxHQUFlLElBQUMsQ0FBQSxJQUFoQixHQUFzQixZQUFoQyxDQUFIO0FBRUMsUUFBQSxhQUFBLEdBQWdCLEdBQUcsQ0FBQyxTQUFKLENBQWMsQ0FBZCxFQUFpQixJQUFDLENBQUEsZ0JBQWdCLENBQUMsTUFBbEIsR0FBeUIsQ0FBMUMsQ0FBaEIsQ0FBQTtBQUFBLFFBRUEsSUFBQyxDQUFBLGdCQUFrQixDQUFBLGFBQUEsQ0FBbkIsQ0FBbUMsT0FBbkMsQ0FGQSxDQUFBO0FBQUEsUUFHQSxJQUFDLENBQUEsT0FBTyxDQUFDLGtCQUFULEdBQThCLGFBSDlCLENBQUE7QUFBQSxRQUtBLElBQUMsQ0FBQSxPQUFPLENBQUMsU0FBVCxHQUFxQixLQUxyQixDQUZEO09BQUEsTUFTSyxJQUFHLENBQUEsS0FBTSxDQUFDLEdBQU4sQ0FBVSxhQUFBLEdBQWUsSUFBQyxDQUFBLElBQWhCLEdBQXNCLFlBQWhDLENBQUo7QUFDSixRQUFBLElBQUMsQ0FBQSxTQUFELEdBQWEsS0FBYixDQUFBO0FBQUEsUUFDQSxpQkFBQSxHQUFvQixLQUFLLENBQUMsR0FBTixDQUFVLGFBQUEsR0FBZSxJQUFDLENBQUEsSUFBaEIsR0FBc0IscUJBQWhDLENBRHBCLENBQUE7QUFBQSxRQUVBLElBQUMsQ0FBQSxnQkFBa0IsQ0FBQSxpQkFBQSxDQUFuQixDQUF1QyxPQUF2QyxDQUZBLENBREk7T0FiTDthQXNCQSxLQUFLLENBQUMsR0FBTixDQUFVLGFBQUEsR0FBYyxJQUFDLENBQUEsSUFBekIsRUFBK0IsSUFBQyxDQUFBLE9BQWhDLEVBQ0M7QUFBQSxRQUFBLE1BQUEsRUFBUSxJQUFSO09BREQsRUF2Qk87SUFBQSxFQTdCd0M7RUFBQSxDQUFqRCxDQUFBLENBQUE7QUFBQSIsImZpbGUiOiJjYXJkc19nZW5lcmF0b3IvZ2VuZXJhdG9ycy9wcmV2LW1ldGhvZC5qcyIsInNvdXJjZVJvb3QiOiIvc291cmNlLyIsInNvdXJjZXNDb250ZW50IjpbIkBhcHAubW9kdWxlICdDYXJkR2VuZXJhdG9yLmdlbmVyYXRvcnMuc3RhcnNHZW4nLCAoU3RhcnNHZW4pIC0+XG5cblx0QG9wdGlvbnMgPSB7fVxuXG5cdEB2YXJpYW50cyA9IFtcblx0XHQjMFxuXHRcdChjb250ZXh0LGFyZ3MuLi4pIC0+XG5cblx0XHRcdGNvbnRleHQuZmlsbFN0eWxlID0gJyNmZmYnXG5cdFx0XHRjb250ZXh0LmZpbGxSZWN0KDAsMCxjb250ZXh0LmNhbnZhcy53aWR0aCxjb250ZXh0LmNhbnZhcy5oZWlnaHQpXG5cblx0XHQjMVxuXHRcdChjb250ZXh0LGFyZ3MuLi4pIC0+XG5cblx0XHRcdGlmICFnZW4ub3B0aW9ucy5pc0RlZmF1bHRcblx0XHRcdFx0cmFuZG9tVmFsMSA9IGdlbi5vcHRpb25zLmRlZmluZWRWYWwxXG5cdFx0XHRlbHNlIGlmIGdlbi5vcHRpb25zLmlzRGVmYXVsdFxuXHRcdFx0XHRyYW5kb21WYWwxID0gYXBwLmdldFJhbmRvbSgwLGdlbi5vcHRpb25zLmNvbG9yU2NoZW1lLmxlbmd0aC0xKVxuXG5cdFx0XHRjb250ZXh0LmZpbGxTdHlsZSA9ICcjZmZmJ1xuXHRcdFx0Y29udGV4dC5maWxsUmVjdCgwLDAsY29udGV4dC5jYW52YXMud2lkdGgsY29udGV4dC5jYW52YXMuaGVpZ2h0KVxuXHRcdFx0Y29udGV4dC5maWxsU3R5bGUgPSAnIycrZ2VuLm9wdGlvbnMuY29sb3JTY2hlbWVbcmFuZG9tVmFsMV1cblx0XHRcdGNvbnRleHQuZmlsbFJlY3QoMCwwLGNvbnRleHQuY2FudmFzLndpZHRoLGNvbnRleHQuY2FudmFzLmhlaWdodClcblxuXHRcdFx0IyBzYXZlIG9wdGlvbnMgdG8gY3VycmVudCBtb2RlbFxuXHRcdFx0Z2VuLm9wdGlvbnMgPVxuXHRcdFx0XHRkZWZpbmVkVmFsMTogcmFuZG9tVmFsMVxuXHRdXG5cdFxuXHRAZHJhdyA9IChjYW52YXMsbW9kZWwsYXJncy4uLikgLT5cblx0XHRhbGVydCAnaGknXG5cdFx0Y29udGV4dCA9IGNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIilcblxuXHRcdCQuZXh0ZW5kKCBAb3B0aW9ucyxtb2RlbC5nZXQgJ2dlbmVyYXRvcnMuJysgQG5hbWUgKVxuXHRcdGlmIG1vZGVsLmdldCAnZ2VuZXJhdG9ycy4nKyBAbmFtZSsgJy5pc0RlZmF1bHQnXG5cblx0XHRcdHJhbmRvbVZhcmlhbnQgPSBhcHAuZ2V0UmFuZG9tKDAsIEBncmFkaWVudFZhcmlhbnRzLmxlbmd0aC0xKVxuXG5cdFx0XHRAZ3JhZGllbnRWYXJpYW50c1sgcmFuZG9tVmFyaWFudCBdKGNvbnRleHQpXG5cdFx0XHRAb3B0aW9ucy5ncmFkaWVudFZhcmlhbnROdW0gPSByYW5kb21WYXJpYW50XG5cblx0XHRcdEBvcHRpb25zLmlzRGVmYXVsdCA9IGZhbHNlXG5cblx0XHRlbHNlIGlmICFtb2RlbC5nZXQgJ2dlbmVyYXRvcnMuJysgQG5hbWUrICcuaXNEZWZhdWx0J1xuXHRcdFx0QGlzRGVmYXVsdCA9IGZhbHNlXG5cdFx0XHRwcmVkZWZpbmVkVmFyaWFudCA9IG1vZGVsLmdldCAnZ2VuZXJhdG9ycy4nKyBAbmFtZSsgJy5ncmFkaWVudFZhcmlhbnROdW0nXG5cdFx0XHRAZ3JhZGllbnRWYXJpYW50c1sgcHJlZGVmaW5lZFZhcmlhbnQgXShjb250ZXh0KVxuXG5cblx0XHQjIFRPRE8gbWFrZSBuZXcgb3B0aW9ucyB0byBhdXRvbWF0aWMgc2F2ZSB0byBtb2RlbCB3aXRob3V0IHRyaWdnZXJpbmcgY2hhbmdlIGV2ZW50XG5cdFx0IyBzYXZlT3B0aW9ucyhtb2RlbC5hdHRyaWJ1dGVzLmdlbi5vcHRpb25zLCBAb3B0aW9ucylcblxuXHRcdG1vZGVsLnNldCAnZ2VuZXJhdG9ycy4nK0BuYW1lLCBAb3B0aW9ucyxcblx0XHRcdHNpbGVudDogdHJ1ZVxuXG4iXX0=