(function() {
  var __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  this.app.module('CardGenerator.cards', function(Cards) {
    return Cards.CardView = (function(_super) {
      __extends(CardView, _super);

      function CardView() {
        this.onShow = __bind(this.onShow, this);
        this.template = __bind(this.template, this);
        return CardView.__super__.constructor.apply(this, arguments);
      }

      CardView.prototype.logger = false;

      CardView.prototype.tagName = 'li';

      CardView.prototype.className = 'card';

      CardView.prototype.ui = {
        canvasFront: '.card_canvas.back',
        canvasBack: '.card_canvas.front'
      };

      CardView.prototype.template = function() {
        return templatizer.cardsGenerator.card(this.model);
      };

      CardView.prototype.initialize = function() {
        this.bind('all', (function(_this) {
          return function() {
            if (_this.logger === true) {
              return console.log("CARD ITEM VIEW:\t \t \t", arguments);
            }
          };
        })(this));
        this.model.view = this;
        return this.listenTo(app, 'resize', this.resize);
      };

      CardView.prototype.onShow = function() {
        var canvas;
        if (this.$el.hasClass('fliped')) {
          canvas = this.$el.find('.card_canvas.back')[0];
        } else {
          canvas = this.$el.find('.card_canvas.front')[0];
        }
        canvas.width = this.$el.width();
        canvas.height = this.$el.height();
        this.renderLayer1(canvas);
        this.renderLayer3(canvas);
        return this;
      };

      CardView.prototype.renderLayer1 = function(canvas) {
        return app.CardGenerator.generators.gradientGen.draw(canvas, this.model);
      };

      CardView.prototype.renderLayer2 = function(canvas) {
        return app.generators[this.model.attributes.plugin.name].draw(canvas, this.model.attributes.plugin.options);
      };

      CardView.prototype.renderLayer3 = function(canvas) {
        return app.CardGenerator.generators.textGen.draw(canvas, this.model);
      };

      CardView.prototype.resize = function() {
        return this.onShow();
      };

      return CardView;

    })(Marionette.ItemView);
  });

}).call(this);

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImNhcmRzX2dlbmVyYXRvci9jYXJkcy9jYXJkLXZpZXcuY29mZmVlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQUEsTUFBQTs7bVNBQUE7O0FBQUEsRUFBQSxJQUFDLENBQUEsR0FBRyxDQUFDLE1BQUwsQ0FBWSxxQkFBWixFQUFtQyxTQUFDLEtBQUQsR0FBQTtXQUM1QixLQUFLLENBQUM7QUFDWCxpQ0FBQSxDQUFBOzs7Ozs7T0FBQTs7QUFBQSx5QkFBQSxNQUFBLEdBQVEsS0FBUixDQUFBOztBQUFBLHlCQUdBLE9BQUEsR0FBUyxJQUhULENBQUE7O0FBQUEseUJBSUEsU0FBQSxHQUFXLE1BSlgsQ0FBQTs7QUFBQSx5QkFNQSxFQUFBLEdBQ0M7QUFBQSxRQUFBLFdBQUEsRUFBYSxtQkFBYjtBQUFBLFFBQ0EsVUFBQSxFQUFZLG9CQURaO09BUEQsQ0FBQTs7QUFBQSx5QkFVQSxRQUFBLEdBQVUsU0FBQSxHQUFBO2VBQ1QsV0FBVyxDQUFDLGNBQWMsQ0FBQyxJQUEzQixDQUFnQyxJQUFDLENBQUEsS0FBakMsRUFEUztNQUFBLENBVlYsQ0FBQTs7QUFBQSx5QkFvQkEsVUFBQSxHQUFZLFNBQUEsR0FBQTtBQUNYLFFBQUEsSUFBQyxDQUFBLElBQUQsQ0FBTSxLQUFOLEVBQWMsQ0FBQSxTQUFBLEtBQUEsR0FBQTtpQkFBQSxTQUFBLEdBQUE7QUFDYixZQUFBLElBQW9ELEtBQUMsQ0FBQSxNQUFELEtBQVcsSUFBL0Q7cUJBQUEsT0FBTyxDQUFDLEdBQVIsQ0FBWSx5QkFBWixFQUF1QyxTQUF2QyxFQUFBO2FBRGE7VUFBQSxFQUFBO1FBQUEsQ0FBQSxDQUFBLENBQUEsSUFBQSxDQUFkLENBQUEsQ0FBQTtBQUFBLFFBR0EsSUFBQyxDQUFBLEtBQUssQ0FBQyxJQUFQLEdBQWMsSUFIZCxDQUFBO2VBS0EsSUFBQyxDQUFBLFFBQUQsQ0FBVSxHQUFWLEVBQWMsUUFBZCxFQUF3QixJQUFDLENBQUEsTUFBekIsRUFOVztNQUFBLENBcEJaLENBQUE7O0FBQUEseUJBNEJBLE1BQUEsR0FBUSxTQUFBLEdBQUE7QUFDUCxZQUFBLE1BQUE7QUFBQSxRQUFBLElBQUcsSUFBQyxDQUFBLEdBQUcsQ0FBQyxRQUFMLENBQWMsUUFBZCxDQUFIO0FBQ0UsVUFBQSxNQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsbUJBQVYsQ0FBK0IsQ0FBQSxDQUFBLENBQXhDLENBREY7U0FBQSxNQUFBO0FBR0MsVUFBQSxNQUFBLEdBQVMsSUFBQyxDQUFBLEdBQUcsQ0FBQyxJQUFMLENBQVUsb0JBQVYsQ0FBZ0MsQ0FBQSxDQUFBLENBQXpDLENBSEQ7U0FBQTtBQUFBLFFBS0EsTUFBTSxDQUFDLEtBQVAsR0FBZSxJQUFDLENBQUEsR0FBRyxDQUFDLEtBQUwsQ0FBQSxDQUxmLENBQUE7QUFBQSxRQU1BLE1BQU0sQ0FBQyxNQUFQLEdBQWdCLElBQUMsQ0FBQSxHQUFHLENBQUMsTUFBTCxDQUFBLENBTmhCLENBQUE7QUFBQSxRQVVBLElBQUMsQ0FBQSxZQUFELENBQWMsTUFBZCxDQVZBLENBQUE7QUFBQSxRQVlBLElBQUMsQ0FBQSxZQUFELENBQWMsTUFBZCxDQVpBLENBQUE7ZUFhQSxLQWRPO01BQUEsQ0E1QlIsQ0FBQTs7QUFBQSx5QkFrS0EsWUFBQSxHQUFjLFNBQUMsTUFBRCxHQUFBO2VBQ2IsR0FBRyxDQUFDLGFBQWEsQ0FBQyxVQUFVLENBQUMsV0FBVyxDQUFDLElBQXpDLENBQThDLE1BQTlDLEVBQXNELElBQUMsQ0FBQSxLQUF2RCxFQURhO01BQUEsQ0FsS2QsQ0FBQTs7QUFBQSx5QkFxS0EsWUFBQSxHQUFjLFNBQUMsTUFBRCxHQUFBO2VBQ2IsR0FBRyxDQUFDLFVBQVcsQ0FBQSxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsSUFBekIsQ0FBOEIsQ0FBQyxJQUE5QyxDQUFtRCxNQUFuRCxFQUEyRCxJQUFDLENBQUEsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLENBQUMsT0FBcEYsRUFEYTtNQUFBLENBcktkLENBQUE7O0FBQUEseUJBd0tBLFlBQUEsR0FBYyxTQUFDLE1BQUQsR0FBQTtlQUNiLEdBQUcsQ0FBQyxhQUFhLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxJQUFyQyxDQUEwQyxNQUExQyxFQUFrRCxJQUFDLENBQUEsS0FBbkQsRUFEYTtNQUFBLENBeEtkLENBQUE7O0FBQUEseUJBMktBLE1BQUEsR0FBTyxTQUFBLEdBQUE7ZUFDTixJQUFDLENBQUEsTUFBRCxDQUFBLEVBRE07TUFBQSxDQTNLUCxDQUFBOztzQkFBQTs7T0FENEIsVUFBVSxDQUFDLFVBRE47RUFBQSxDQUFuQyxDQUFBLENBQUE7QUFBQSIsImZpbGUiOiJjYXJkc19nZW5lcmF0b3IvY2FyZHMvY2FyZC12aWV3LmpzIiwic291cmNlUm9vdCI6Ii9zb3VyY2UvIiwic291cmNlc0NvbnRlbnQiOlsiQGFwcC5tb2R1bGUgJ0NhcmRHZW5lcmF0b3IuY2FyZHMnLCAoQ2FyZHMpIC0+XHRcblx0Y2xhc3MgQ2FyZHMuQ2FyZFZpZXcgZXh0ZW5kcyBNYXJpb25ldHRlLkl0ZW1WaWV3XG5cdFx0bG9nZ2VyOiBvZmZcblxuXG5cdFx0dGFnTmFtZTogJ2xpJ1xuXHRcdGNsYXNzTmFtZTogJ2NhcmQnXG5cblx0XHR1aTpcblx0XHRcdGNhbnZhc0Zyb250OiAnLmNhcmRfY2FudmFzLmJhY2snXG5cdFx0XHRjYW52YXNCYWNrOiAnLmNhcmRfY2FudmFzLmZyb250J1xuXG5cdFx0dGVtcGxhdGU6ID0+XG5cdFx0XHR0ZW1wbGF0aXplci5jYXJkc0dlbmVyYXRvci5jYXJkIEBtb2RlbFxuXHRcdCMgZXZlbnRzOlxuXHRcdFx0IyAnbW91c2VlbnRlcic6ICAnbW91c2VlbnRlcidcblx0XHRcdCMgJ21vdXNlbGVhdmUnOiAgJ21vdXNlbGVhdmUnXG5cdFx0XHQjICdjbGljayAuanNfbG9ja19jb25maWdfYnV0dG9uJzogJ2xvY2tlcidcblx0XHRcdCMgJ3RyYW5zaXRpb25lbmQnOiAndHJhbnNpdGlvbkNhbGxiYWNrJ1xuXHRcdFx0IyAncmVzaXplJzogJ3Jlc2l6ZXInXG5cblx0XHQjIG1vZGVsRXZlbnRzOiB7fVxuXHRcdGluaXRpYWxpemU6IC0+XG5cdFx0XHRAYmluZCAnYWxsJywgID0+IFxuXHRcdFx0XHRjb25zb2xlLmxvZyBcIkNBUkQgSVRFTSBWSUVXOlxcdCBcXHQgXFx0XCIsIGFyZ3VtZW50cyBpZiBAbG9nZ2VyIGlzIG9uXG5cblx0XHRcdEBtb2RlbC52aWV3ID0gQFxuXHRcdFx0IyBAbGlzdGVuVG8gQG1vZGVsLCdjaGFuZ2UnLEByZW5kZXJcblx0XHRcdEBsaXN0ZW5UbyBhcHAsJ3Jlc2l6ZScsIEByZXNpemVcblxuXHRcdG9uU2hvdzogPT5cblx0XHRcdGlmIEAkZWwuaGFzQ2xhc3MgJ2ZsaXBlZCdcblx0XHRcdFx0IGNhbnZhcyA9IEAkZWwuZmluZCgnLmNhcmRfY2FudmFzLmJhY2snKVswXVxuXHRcdFx0ZWxzZVxuXHRcdFx0XHRjYW52YXMgPSBAJGVsLmZpbmQoJy5jYXJkX2NhbnZhcy5mcm9udCcpWzBdXG5cblx0XHRcdGNhbnZhcy53aWR0aCA9IEAkZWwud2lkdGgoKVxuXHRcdFx0Y2FudmFzLmhlaWdodCA9IEAkZWwuaGVpZ2h0KClcblx0XHRcdCMgQGluaXRDb2xvclNjaGVtZSgpXG5cblx0XHRcdCMgY29uc29sZS5sb2cgQG1vZGVsXG5cdFx0XHRAcmVuZGVyTGF5ZXIxKGNhbnZhcylcblx0XHRcdCMgQHJlbmRlckxheWVyMihjYW52YXMpXG5cdFx0XHRAcmVuZGVyTGF5ZXIzKGNhbnZhcylcblx0XHRcdEBcblxuXHRcdCMgb25SZW5kZXI6ID0+XG5cblxuXHRcdCMgaW5pdENvbG9yU2NoZW1lOiA9PlxuXHRcdCMgXHRzY20gPSBuZXcgQ29sb3JTY2hlbWUoKVxuXHRcdCMgXHRodWUgPSBhcHAuZ2V0UmFuZG9tKDAuMiwgMzU5LCAxKVxuXG5cdFx0IyBcdHZhcmlhdGlvbnMgPSBbJ2RlZmF1bHQnLCAncGFzdGVsJywgJ3NvZnQnLCAnbGlnaHQnLCAnaGFyZCcsICdwYWxlJyBdXG5cdFx0IyBcdHZhcmlhdGlvbiA9IHZhcmlhdGlvbnNbIGFwcC5nZXRSYW5kb20oMCwgdmFyaWF0aW9ucy5sZW5ndGgtMSkgXVxuXHRcdCMgXHRjb25zb2xlLmxvZyB2YXJpYXRpb25cblx0XHQjIFx0c2NtLmZyb21faHVlKGh1ZSlcblx0XHQjIFx0LnNjaGVtZSgndGV0cmFkZScpXG5cdFx0IyBcdC5kaXN0YW5jZSgwLjEpXG5cdFx0IyBcdC5hZGRfY29tcGxlbWVudChmYWxzZSlcblx0XHQjIFx0LnZhcmlhdGlvbih2YXJpYXRpb24pXG5cdFx0IyBcdC53ZWJfc2FmZShmYWxzZSlcblx0XHQjIFx0QG1vZGVsLnNldCAnY29sb3JTY2hlbWUnLCBzY20uY29sb3JzKClcblx0XHQjIFx0Y29uc29sZS5sb2cgQG1vZGVsXG5cblx0XHQjIHRyYW5zaXRpb25DYWxsYmFjayA6IChlKSA9PlxuXHRcdCMgXHRlLnZpZXcgPSBAXG5cdFx0IyBcdHByb3BlcnR5TmFtZSA9IGUub3JpZ2luYWxFdmVudC5wcm9wZXJ0eU5hbWVcblx0XHQjIFx0aWYgZS50YXJnZXQgaXMgQCRlbC5maW5kKCcuY2FyZF9wZXJzcGVjdGl2ZV9pbm5lcl93cmFwcGVyJylbMF0gYW5kIHByb3BlcnR5TmFtZS5zZWFyY2goJ3RyYW5zZm9ybScpID4gLTFcblx0XHQjIFx0XHRpZiBAJGVsLmhhc0NsYXNzICdpc19mbGlwaW5nJ1xuXHRcdCMgXHRcdFx0QCRlbC5yZW1vdmVDbGFzcyAnaXNfZmxpcGluZydcblx0XHQjIFx0QHRyaWdnZXIgJ3RyYW5zaXRpb25lbmQnLCBlXG5cblxuXHRcdCMgcmVuZGVyOiA9PlxuXHRcdCMgXHRpZiBAJGVsLmhhc0NsYXNzICdmbGlwZWQnXG5cdFx0IyBcdFx0Y2FudmFzID0gQCRlbC5maW5kKCcuY2FyZF9jYW52YXMuYmFjaycpWzBdXG5cdFx0IyBcdGVsc2Vcblx0XHQjIFx0XHRjYW52YXMgPSBAJGVsLmZpbmQoJy5jYXJkX2NhbnZhcy5mcm9udCcpWzBdXG5cblx0XHQjIFx0Y2FudmFzLndpZHRoID0gQCRlbC53aWR0aCgpXG5cdFx0IyBcdGNhbnZhcy5oZWlnaHQgPSBAJGVsLmhlaWdodCgpXG5cdFx0IyBcdCMgQGluaXRDb2xvclNjaGVtZSgpXG5cblx0XHQjIFx0IyBjb25zb2xlLmxvZyBAbW9kZWxcblx0XHQjIFx0QHJlbmRlckxheWVyMShjYW52YXMpXG5cdFx0IyBcdCMgQHJlbmRlckxheWVyMihjYW52YXMpXG5cdFx0IyBcdEByZW5kZXJMYXllcjMoY2FudmFzKVxuXHRcdCMgXHRAXG5cdFx0XG5cdFx0IyBhbmltYXRlZFJlbmRlcjogPT5cblx0XHQjIFx0aWYgIUAkZWwuaGFzQ2xhc3MgJ2ZsaXBlZCdcblx0XHQjIFx0XHRjYW52YXMgPSBAJGVsLmZpbmQoJy5jYXJkX2NhbnZhcy5iYWNrJylbMF1cblx0XHQjIFx0ZWxzZVxuXHRcdCMgXHRcdGNhbnZhcyA9IEAkZWwuZmluZCgnLmNhcmRfY2FudmFzLmZyb250JylbMF1cblxuXHRcdCMgXHRjYW52YXMud2lkdGggPSBAJGVsLndpZHRoKClcblx0XHQjIFx0Y2FudmFzLmhlaWdodCA9IEAkZWwuaGVpZ2h0KClcblxuXG5cdFx0IyBcdEByZW5kZXJMYXllcjEoY2FudmFzKVxuXHRcdCMgXHQjIEByZW5kZXJMYXllcjIoY2FudmFzKVxuXHRcdCMgXHRAcmVuZGVyTGF5ZXIzKGNhbnZhcylcblxuXHRcdCMgXHRcdCMgZGVsYXkgPSAodHJhbnNpdGlvbkQgKiAoQG1vZGVsLmlkLTEpKS50b0ZpeGVkKClcblx0XHQjIFx0XHQjIGNvbnNvbGUubG9nIHRyYW5zaXRpb25EXG5cdFx0IyBcdFx0IyBzZXRUaW1lb3V0IGFmdGVyRmxpcCwgdHJhbnNpdGlvbkRcblx0XHRcdFxuXHRcdCMgXHQjIGFmdGVyRmxpcCA9IC0+XG5cdFx0IyBcdCMgXHRAdHJpZ2dlciAnYWZ0ZXJGbGlwJyAsIFxuXHRcdCMgXHRcdCMgQCRlbC5yZW1vdmVDbGFzcyAnaXNfZmxpcGluZydcblx0XHQjIFx0IyBjb25zb2xlLmxvZyAoKEBtb2RlbC5pZC0xKSAqIHRyYW5zaXRpb25EKjAuMikudG9GaXhlZCgpXG5cdFx0IyBcdCMgc2V0VGltZW91dCBmbGlwLCAoKEBtb2RlbC5pZC0xKSAqIDIwMCkudG9GaXhlZCgpXG5cdFx0XHRcdFxuXHRcdCMgXHRzZXRUaW1lb3V0IEBmbGlwLCAxMDAwXG5cdFx0IyBcdEBcblx0XHRcdFxuXHRcdCMgZmxpcDogPT5cblx0XHQjIFx0QHRyaWdnZXIgJ2ZsaXAnXG5cdFx0IyBcdEAkZWwudG9nZ2xlQ2xhc3MgJ2ZsaXBlZCdcblx0XHQjIFx0QCRlbC5hZGRDbGFzcyAnaXNfZmxpcGluZydcblxuXHRcdCMgXHRAdHJpZ2dlciAnZmxpcCdcblx0XHQjIFx0QCRlbC5hZGRDbGFzcyAnaXNfZmxpcGluZydcblx0XHQjIFx0IyBpZiBAJGVsLmhhc0NsYXNzICdmbGlwZWRfOTAtMCdcblx0XHQjIFx0IyBcdEAkZWwucmVtb3ZlQ2xhc3MgJ2ZsaXBlZF85MC0wJ1xuXHRcdCMgXHQjIFx0QCRlbC5hZGRDbGFzcyAnZmxpcGVkXzAtOTAnXG5cblx0XHQjIFx0IyBlbHNlIGlmIEAkZWwuaGFzQ2xhc3MgJ2ZsaXBlZF85MC0xODAnXG5cdFx0IyBcdCMgXHRAJGVsLnJlbW92ZUNsYXNzICdmbGlwZWRfOTAtMTgwJ1xuXHRcdCMgXHQjIFx0QCRlbC5hZGRDbGFzcyAnZmxpcGVkXzE4MC05MCdcblx0XHQjIFx0IyBlbHNlXG5cdFx0IyBcdCMgXHRAJGVsLmFkZENsYXNzICdmbGlwZWRfMC05MCdcblxuXHRcdCMgXHQjIEAkZWwuYWRkQ2xhc3MgJ2lzX2ZsaXBpbmcnXG5cdFx0IyBcdHNldFRpbWVvdXQgKCkgPT5cblx0XHQjIFx0XHRjb25zb2xlLmxvZyBhbmltYXRpb25ELHRyYW5zaXRpb25EXG5cdFx0IyBcdFx0YW5pbWF0aW9uRCA9ICggcGFyc2VGbG9hdCBAJGVsLmZpbmQoJy5jYXJkX3BlcnNwZWN0aXZlX2lubmVyX3dyYXBwZXInKS5jc3MgJ2FuaW1hdGlvbi1kdXJhdGlvbicgKSAqIDEwMDBcblx0XHQjIFx0XHRjYW52YXMgPSBAJGVsLmZpbmQoJy5jYXJkX2NhbnZhcy5mcm9udCcpWzBdXG5cdFx0IyBcdFx0Y2FudmFzLndpZHRoID0gQCRlbC53aWR0aCgpXG5cdFx0IyBcdFx0Y2FudmFzLmhlaWdodCA9IEAkZWwuaGVpZ2h0KClcblx0XHQjIFx0XHRAcmVuZGVyTGF5ZXIxKGNhbnZhcylcblx0XHQjIFx0XHQjIEByZW5kZXJMYXllcjIoY2FudmFzKVxuXHRcdCMgXHRcdEByZW5kZXJMYXllcjMoY2FudmFzKVxuXG5cdFx0IyBcdFx0aWYgQCRlbC5oYXNDbGFzcyAnZmxpcGVkXzAtOTAnXG5cdFx0IyBcdFx0XHRAJGVsLnJlbW92ZUNsYXNzICdmbGlwZWRfMC05MCdcblx0XHQjIFx0XHRcdEAkZWwuYWRkQ2xhc3MgJ2ZsaXBlZF85MC0xODAnXG5cblx0XHQjIFx0XHRlbHNlIGlmIEAkZWwuaGFzQ2xhc3MgJ2ZsaXBlZF8xODAtOTAnXG5cdFx0IyBcdFx0XHRAJGVsLnJlbW92ZUNsYXNzICdmbGlwZWRfMTgwLTkwJ1xuXHRcdCMgXHRcdFx0QCRlbC5hZGRDbGFzcyAnZmxpcGVkXzkwLTAnXG5cdFx0IyBcdFx0ZWxzZVxuXHRcdCMgXHRcdFx0QCRlbC5hZGRDbGFzcyAnZmxpcGVkXzkwLTE4MCdcblx0XHQjIFx0XHRzZXRUaW1lb3V0ICgpIC0+XG5cdFx0IyBcdFx0XHRAJGVsLnJlbW92ZUNsYXNzICdpc19mbGlwaW5nJ1xuXHRcdCMgXHRcdCwgcGFyc2VGbG9hdChAJGVsLmZpbmQoJy5jYXJkX3BlcnNwZWN0aXZlX2lubmVyX3dyYXBwZXInKS5jc3MgJ2FuaW1hdGlvbi1kdXJhdGlvbicpICogMTAwMHpcblx0XHQjIFx0XHQjIGNvbnNvbGUubG9nIHRyYW5zaXRpb25ELzJcblx0XHQjIFx0LCBwYXJzZUZsb2F0KEAkZWwuZmluZCgnLmNhcmRfcGVyc3BlY3RpdmVfaW5uZXJfd3JhcHBlcicpLmNzcyAnYW5pbWF0aW9uLWR1cmF0aW9uJykgKiAxMDAwXG5cdFx0IyBcdCMgZmxpcCA9IChALGNhbnZhcykgLT5cblx0XHQjIFx0XHQjIGRlbGF5ID0gKHRyYW5zaXRpb25EICogKEBtb2RlbC5pZC0xKSkudG9GaXhlZCgpXG5cdFx0IyBcdFx0IyBjb25zb2xlLmxvZyB0cmFuc2l0aW9uRFxuXHRcdCMgXHRcdCMgc2V0VGltZW91dCBhZnRlckZsaXAsIHRyYW5zaXRpb25EXG5cblx0XHRyZW5kZXJMYXllcjE6IChjYW52YXMpLT5cblx0XHRcdGFwcC5DYXJkR2VuZXJhdG9yLmdlbmVyYXRvcnMuZ3JhZGllbnRHZW4uZHJhdyBjYW52YXMsIEBtb2RlbFxuXG5cdFx0cmVuZGVyTGF5ZXIyOiAoY2FudmFzKS0+XG5cdFx0XHRhcHAuZ2VuZXJhdG9yc1tAbW9kZWwuYXR0cmlidXRlcy5wbHVnaW4ubmFtZV0uZHJhdyBjYW52YXMsIEBtb2RlbC5hdHRyaWJ1dGVzLnBsdWdpbi5vcHRpb25zXG5cblx0XHRyZW5kZXJMYXllcjM6IChjYW52YXMpLT5cblx0XHRcdGFwcC5DYXJkR2VuZXJhdG9yLmdlbmVyYXRvcnMudGV4dEdlbi5kcmF3IGNhbnZhcywgQG1vZGVsXG5cblx0XHRyZXNpemU6LT4gXG5cdFx0XHRAb25TaG93KClcblxuXHRcdCMgbG9ja2VyOiAtPlxuXHRcdCMgXHRpZiBAbW9kZWwuZ2V0KCdsb2NrZWQnKSBpcyB0cnVlXG5cdFx0IyBcdFx0QG1vZGVsLnNldCAnbG9ja2VkJywgZmFsc2UsXG5cdFx0IyBcdFx0XHRzaWxlbnQ6IHRydWVcblx0XHQjIFx0XHRAJGVsLnJlbW92ZUNsYXNzKCdsb2NrZWQnKVxuXHRcdCMgXHRcdC5maW5kICcuanNfbG9ja19jb25maWdfYnV0dG9uJ1xuXHRcdCMgXHRcdC50ZXh0ICfQl9Cw0LrRgNC10L/QuNGC0YwnIFxuXHRcdCMgXHRlbHNlXG5cdFx0IyBcdFx0QG1vZGVsLnNldCAnbG9ja2VkJywgdHJ1ZSxcblx0XHQjIFx0XHRcdHNpbGVudDogdHJ1ZVxuXHRcdCMgXHRcdEAkZWwuYWRkQ2xhc3MoJ2xvY2tlZCcpXG5cdFx0IyBcdFx0LmZpbmQgJy5qc19sb2NrX2NvbmZpZ19idXR0b24nXG5cdFx0IyBcdFx0LnRleHQgJ9Ce0YLQutGA0LXQv9C40YLRjCcgXG5cblx0XHQjIG1vdXNlZW50ZXI6IC0+XG5cdFx0IyBcdGlmICFAbW9kZWwuaGFzKCdsb2NrZWQnKSBvciBAbW9kZWwuZ2V0KCdsb2NrZWQnKSBpc250IHRydWUgXG5cdFx0IyBcdFx0aWYgQCRlbC5oYXNDbGFzcygnaXNfZmxpcGluZycpXG5cdFx0IyBcdFx0XHRAJGVsLnRvZ2dsZUNsYXNzICdmbGlwZWQnXG5cdFx0IyBcdFx0QCRlbC5wcmVwZW5kICc8ZGl2IGNsYXNzPVwianNfbG9ja19jb25maWdfYnV0dG9uX3dyYXBwZXJcIj48YnV0dG9uIGNsYXNzPVwianNfbG9ja19jb25maWdfYnV0dG9uXCI+0JfQsNC60YDQtdC/0LjRgtGMPC9idXR0b24+PC9kaXY+J1xuXHRcdCMgbW91c2VsZWF2ZTogLT5cblx0XHQjIFx0aWYgIUBtb2RlbC5oYXMoJ2xvY2tlZCcpIG9yIEBtb2RlbC5nZXQoJ2xvY2tlZCcpIGlzbnQgdHJ1ZVxuXHRcdCMgXHRcdEAkZWwuZmluZCgnLmpzX2xvY2tfY29uZmlnX2J1dHRvbl93cmFwcGVyJykucmVtb3ZlKClcblxuIl19